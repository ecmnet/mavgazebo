// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor_noise.proto

package msgs.gazebo.msgs;

public final class SensorNoiseOuterClass {
  private SensorNoiseOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SensorNoiseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gazebo.msgs.SensorNoise)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *&#47; &#92;brief The type of noise
     * </pre>
     *
     * <code>required .gazebo.msgs.SensorNoise.Type type = 1;</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <pre>
     *&#47; &#92;brief The type of noise
     * </pre>
     *
     * <code>required .gazebo.msgs.SensorNoise.Type type = 1;</code>
     * @return The type.
     */
    msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type getType();

    /**
     * <pre>
     *&#47; &#92;brief Noise mean
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double mean = 2;</code>
     * @return Whether the mean field is set.
     */
    boolean hasMean();
    /**
     * <pre>
     *&#47; &#92;brief Noise mean
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double mean = 2;</code>
     * @return The mean.
     */
    double getMean();

    /**
     * <pre>
     *&#47; &#92;brief Noise standard deviation
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double stddev = 3;</code>
     * @return Whether the stddev field is set.
     */
    boolean hasStddev();
    /**
     * <pre>
     *&#47; &#92;brief Noise standard deviation
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double stddev = 3;</code>
     * @return The stddev.
     */
    double getStddev();

    /**
     * <pre>
     *&#47; &#92;brief Noise mean bias
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double bias_mean = 4;</code>
     * @return Whether the biasMean field is set.
     */
    boolean hasBiasMean();
    /**
     * <pre>
     *&#47; &#92;brief Noise mean bias
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double bias_mean = 4;</code>
     * @return The biasMean.
     */
    double getBiasMean();

    /**
     * <pre>
     *&#47; &#92;brief Noise standard deviation bias
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double bias_stddev = 5;</code>
     * @return Whether the biasStddev field is set.
     */
    boolean hasBiasStddev();
    /**
     * <pre>
     *&#47; &#92;brief Noise standard deviation bias
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double bias_stddev = 5;</code>
     * @return The biasStddev.
     */
    double getBiasStddev();

    /**
     * <pre>
     *&#47; &#92;brief Noise  precision.
     * / Used by GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double precision = 6;</code>
     * @return Whether the precision field is set.
     */
    boolean hasPrecision();
    /**
     * <pre>
     *&#47; &#92;brief Noise  precision.
     * / Used by GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double precision = 6;</code>
     * @return The precision.
     */
    double getPrecision();
  }
  /**
   * Protobuf type {@code gazebo.msgs.SensorNoise}
   */
  public static final class SensorNoise extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gazebo.msgs.SensorNoise)
      SensorNoiseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SensorNoise.newBuilder() to construct.
    private SensorNoise(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SensorNoise() {
      type_ = 1;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SensorNoise();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SensorNoise(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();
                @SuppressWarnings("deprecation")
              msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type value = msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = rawValue;
              }
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              mean_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              stddev_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              biasMean_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              biasStddev_ = input.readDouble();
              break;
            }
            case 49: {
              bitField0_ |= 0x00000020;
              precision_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return msgs.gazebo.msgs.SensorNoiseOuterClass.internal_static_gazebo_msgs_SensorNoise_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return msgs.gazebo.msgs.SensorNoiseOuterClass.internal_static_gazebo_msgs_SensorNoise_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.class, msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Builder.class);
    }

    /**
     * <pre>
     *&#47; &#92;brief Noise types
     * </pre>
     *
     * Protobuf enum {@code gazebo.msgs.SensorNoise.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       *&#47; &#92;brief No noise
       * </pre>
       *
       * <code>NONE = 1;</code>
       */
      NONE(1),
      /**
       * <pre>
       *&#47; &#92;brief Gaussian noise
       * </pre>
       *
       * <code>GAUSSIAN = 2;</code>
       */
      GAUSSIAN(2),
      /**
       * <pre>
       *&#47; &#92;brief Gaussian noise plus quantization of outputs (rounding)
       * </pre>
       *
       * <code>GAUSSIAN_QUANTIZED = 3;</code>
       */
      GAUSSIAN_QUANTIZED(3),
      ;

      /**
       * <pre>
       *&#47; &#92;brief No noise
       * </pre>
       *
       * <code>NONE = 1;</code>
       */
      public static final int NONE_VALUE = 1;
      /**
       * <pre>
       *&#47; &#92;brief Gaussian noise
       * </pre>
       *
       * <code>GAUSSIAN = 2;</code>
       */
      public static final int GAUSSIAN_VALUE = 2;
      /**
       * <pre>
       *&#47; &#92;brief Gaussian noise plus quantization of outputs (rounding)
       * </pre>
       *
       * <code>GAUSSIAN_QUANTIZED = 3;</code>
       */
      public static final int GAUSSIAN_QUANTIZED_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 1: return NONE;
          case 2: return GAUSSIAN;
          case 3: return GAUSSIAN_QUANTIZED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:gazebo.msgs.SensorNoise.Type)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     *&#47; &#92;brief The type of noise
     * </pre>
     *
     * <code>required .gazebo.msgs.SensorNoise.Type type = 1;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override public boolean hasType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief The type of noise
     * </pre>
     *
     * <code>required .gazebo.msgs.SensorNoise.Type type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type getType() {
      @SuppressWarnings("deprecation")
      msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type result = msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type.valueOf(type_);
      return result == null ? msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type.NONE : result;
    }

    public static final int MEAN_FIELD_NUMBER = 2;
    private double mean_;
    /**
     * <pre>
     *&#47; &#92;brief Noise mean
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double mean = 2;</code>
     * @return Whether the mean field is set.
     */
    @java.lang.Override
    public boolean hasMean() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Noise mean
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double mean = 2;</code>
     * @return The mean.
     */
    @java.lang.Override
    public double getMean() {
      return mean_;
    }

    public static final int STDDEV_FIELD_NUMBER = 3;
    private double stddev_;
    /**
     * <pre>
     *&#47; &#92;brief Noise standard deviation
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double stddev = 3;</code>
     * @return Whether the stddev field is set.
     */
    @java.lang.Override
    public boolean hasStddev() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Noise standard deviation
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double stddev = 3;</code>
     * @return The stddev.
     */
    @java.lang.Override
    public double getStddev() {
      return stddev_;
    }

    public static final int BIAS_MEAN_FIELD_NUMBER = 4;
    private double biasMean_;
    /**
     * <pre>
     *&#47; &#92;brief Noise mean bias
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double bias_mean = 4;</code>
     * @return Whether the biasMean field is set.
     */
    @java.lang.Override
    public boolean hasBiasMean() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Noise mean bias
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double bias_mean = 4;</code>
     * @return The biasMean.
     */
    @java.lang.Override
    public double getBiasMean() {
      return biasMean_;
    }

    public static final int BIAS_STDDEV_FIELD_NUMBER = 5;
    private double biasStddev_;
    /**
     * <pre>
     *&#47; &#92;brief Noise standard deviation bias
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double bias_stddev = 5;</code>
     * @return Whether the biasStddev field is set.
     */
    @java.lang.Override
    public boolean hasBiasStddev() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Noise standard deviation bias
     * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double bias_stddev = 5;</code>
     * @return The biasStddev.
     */
    @java.lang.Override
    public double getBiasStddev() {
      return biasStddev_;
    }

    public static final int PRECISION_FIELD_NUMBER = 6;
    private double precision_;
    /**
     * <pre>
     *&#47; &#92;brief Noise  precision.
     * / Used by GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double precision = 6;</code>
     * @return Whether the precision field is set.
     */
    @java.lang.Override
    public boolean hasPrecision() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Noise  precision.
     * / Used by GAUSSIAN_QUANTIZED
     * </pre>
     *
     * <code>optional double precision = 6;</code>
     * @return The precision.
     */
    @java.lang.Override
    public double getPrecision() {
      return precision_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeDouble(2, mean_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeDouble(3, stddev_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeDouble(4, biasMean_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeDouble(5, biasStddev_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeDouble(6, precision_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, mean_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, stddev_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, biasMean_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, biasStddev_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, precision_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise)) {
        return super.equals(obj);
      }
      msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise other = (msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise) obj;

      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (type_ != other.type_) return false;
      }
      if (hasMean() != other.hasMean()) return false;
      if (hasMean()) {
        if (java.lang.Double.doubleToLongBits(getMean())
            != java.lang.Double.doubleToLongBits(
                other.getMean())) return false;
      }
      if (hasStddev() != other.hasStddev()) return false;
      if (hasStddev()) {
        if (java.lang.Double.doubleToLongBits(getStddev())
            != java.lang.Double.doubleToLongBits(
                other.getStddev())) return false;
      }
      if (hasBiasMean() != other.hasBiasMean()) return false;
      if (hasBiasMean()) {
        if (java.lang.Double.doubleToLongBits(getBiasMean())
            != java.lang.Double.doubleToLongBits(
                other.getBiasMean())) return false;
      }
      if (hasBiasStddev() != other.hasBiasStddev()) return false;
      if (hasBiasStddev()) {
        if (java.lang.Double.doubleToLongBits(getBiasStddev())
            != java.lang.Double.doubleToLongBits(
                other.getBiasStddev())) return false;
      }
      if (hasPrecision() != other.hasPrecision()) return false;
      if (hasPrecision()) {
        if (java.lang.Double.doubleToLongBits(getPrecision())
            != java.lang.Double.doubleToLongBits(
                other.getPrecision())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + type_;
      }
      if (hasMean()) {
        hash = (37 * hash) + MEAN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getMean()));
      }
      if (hasStddev()) {
        hash = (37 * hash) + STDDEV_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getStddev()));
      }
      if (hasBiasMean()) {
        hash = (37 * hash) + BIAS_MEAN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getBiasMean()));
      }
      if (hasBiasStddev()) {
        hash = (37 * hash) + BIAS_STDDEV_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getBiasStddev()));
      }
      if (hasPrecision()) {
        hash = (37 * hash) + PRECISION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getPrecision()));
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.SensorNoise}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gazebo.msgs.SensorNoise)
        msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoiseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return msgs.gazebo.msgs.SensorNoiseOuterClass.internal_static_gazebo_msgs_SensorNoise_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return msgs.gazebo.msgs.SensorNoiseOuterClass.internal_static_gazebo_msgs_SensorNoise_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.class, msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Builder.class);
      }

      // Construct using gazebo.msgs.SensorNoiseOuterClass.SensorNoise.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        type_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        mean_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        stddev_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        biasMean_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        biasStddev_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        precision_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return msgs.gazebo.msgs.SensorNoiseOuterClass.internal_static_gazebo_msgs_SensorNoise_descriptor;
      }

      @java.lang.Override
      public msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise getDefaultInstanceForType() {
        return msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.getDefaultInstance();
      }

      @java.lang.Override
      public msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise build() {
        msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise buildPartial() {
        msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise result = new msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.mean_ = mean_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.stddev_ = stddev_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.biasMean_ = biasMean_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.biasStddev_ = biasStddev_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.precision_ = precision_;
          to_bitField0_ |= 0x00000020;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise) {
          return mergeFrom((msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise other) {
        if (other == msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasMean()) {
          setMean(other.getMean());
        }
        if (other.hasStddev()) {
          setStddev(other.getStddev());
        }
        if (other.hasBiasMean()) {
          setBiasMean(other.getBiasMean());
        }
        if (other.hasBiasStddev()) {
          setBiasStddev(other.getBiasStddev());
        }
        if (other.hasPrecision()) {
          setPrecision(other.getPrecision());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasType()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int type_ = 1;
      /**
       * <pre>
       *&#47; &#92;brief The type of noise
       * </pre>
       *
       * <code>required .gazebo.msgs.SensorNoise.Type type = 1;</code>
       * @return Whether the type field is set.
       */
      @java.lang.Override public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief The type of noise
       * </pre>
       *
       * <code>required .gazebo.msgs.SensorNoise.Type type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type getType() {
        @SuppressWarnings("deprecation")
        msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type result = msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type.valueOf(type_);
        return result == null ? msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type.NONE : result;
      }
      /**
       * <pre>
       *&#47; &#92;brief The type of noise
       * </pre>
       *
       * <code>required .gazebo.msgs.SensorNoise.Type type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief The type of noise
       * </pre>
       *
       * <code>required .gazebo.msgs.SensorNoise.Type type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 1;
        onChanged();
        return this;
      }

      private double mean_ ;
      /**
       * <pre>
       *&#47; &#92;brief Noise mean
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double mean = 2;</code>
       * @return Whether the mean field is set.
       */
      @java.lang.Override
      public boolean hasMean() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise mean
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double mean = 2;</code>
       * @return The mean.
       */
      @java.lang.Override
      public double getMean() {
        return mean_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise mean
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double mean = 2;</code>
       * @param value The mean to set.
       * @return This builder for chaining.
       */
      public Builder setMean(double value) {
        bitField0_ |= 0x00000002;
        mean_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise mean
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double mean = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMean() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mean_ = 0D;
        onChanged();
        return this;
      }

      private double stddev_ ;
      /**
       * <pre>
       *&#47; &#92;brief Noise standard deviation
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double stddev = 3;</code>
       * @return Whether the stddev field is set.
       */
      @java.lang.Override
      public boolean hasStddev() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise standard deviation
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double stddev = 3;</code>
       * @return The stddev.
       */
      @java.lang.Override
      public double getStddev() {
        return stddev_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise standard deviation
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double stddev = 3;</code>
       * @param value The stddev to set.
       * @return This builder for chaining.
       */
      public Builder setStddev(double value) {
        bitField0_ |= 0x00000004;
        stddev_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise standard deviation
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double stddev = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearStddev() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stddev_ = 0D;
        onChanged();
        return this;
      }

      private double biasMean_ ;
      /**
       * <pre>
       *&#47; &#92;brief Noise mean bias
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double bias_mean = 4;</code>
       * @return Whether the biasMean field is set.
       */
      @java.lang.Override
      public boolean hasBiasMean() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise mean bias
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double bias_mean = 4;</code>
       * @return The biasMean.
       */
      @java.lang.Override
      public double getBiasMean() {
        return biasMean_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise mean bias
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double bias_mean = 4;</code>
       * @param value The biasMean to set.
       * @return This builder for chaining.
       */
      public Builder setBiasMean(double value) {
        bitField0_ |= 0x00000008;
        biasMean_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise mean bias
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double bias_mean = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearBiasMean() {
        bitField0_ = (bitField0_ & ~0x00000008);
        biasMean_ = 0D;
        onChanged();
        return this;
      }

      private double biasStddev_ ;
      /**
       * <pre>
       *&#47; &#92;brief Noise standard deviation bias
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double bias_stddev = 5;</code>
       * @return Whether the biasStddev field is set.
       */
      @java.lang.Override
      public boolean hasBiasStddev() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise standard deviation bias
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double bias_stddev = 5;</code>
       * @return The biasStddev.
       */
      @java.lang.Override
      public double getBiasStddev() {
        return biasStddev_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise standard deviation bias
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double bias_stddev = 5;</code>
       * @param value The biasStddev to set.
       * @return This builder for chaining.
       */
      public Builder setBiasStddev(double value) {
        bitField0_ |= 0x00000010;
        biasStddev_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise standard deviation bias
       * / Used by GAUSSIAN, and GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double bias_stddev = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearBiasStddev() {
        bitField0_ = (bitField0_ & ~0x00000010);
        biasStddev_ = 0D;
        onChanged();
        return this;
      }

      private double precision_ ;
      /**
       * <pre>
       *&#47; &#92;brief Noise  precision.
       * / Used by GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double precision = 6;</code>
       * @return Whether the precision field is set.
       */
      @java.lang.Override
      public boolean hasPrecision() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise  precision.
       * / Used by GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double precision = 6;</code>
       * @return The precision.
       */
      @java.lang.Override
      public double getPrecision() {
        return precision_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise  precision.
       * / Used by GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double precision = 6;</code>
       * @param value The precision to set.
       * @return This builder for chaining.
       */
      public Builder setPrecision(double value) {
        bitField0_ |= 0x00000020;
        precision_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Noise  precision.
       * / Used by GAUSSIAN_QUANTIZED
       * </pre>
       *
       * <code>optional double precision = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrecision() {
        bitField0_ = (bitField0_ & ~0x00000020);
        precision_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:gazebo.msgs.SensorNoise)
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.SensorNoise)
    private static final msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise();
    }

    public static msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<SensorNoise>
        PARSER = new com.google.protobuf.AbstractParser<SensorNoise>() {
      @java.lang.Override
      public SensorNoise parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SensorNoise(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SensorNoise> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SensorNoise> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public msgs.gazebo.msgs.SensorNoiseOuterClass.SensorNoise getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_SensorNoise_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gazebo_msgs_SensorNoise_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022sensor_noise.proto\022\013gazebo.msgs\"\313\001\n\013Se" +
      "nsorNoise\022+\n\004type\030\001 \002(\0162\035.gazebo.msgs.Se" +
      "nsorNoise.Type\022\014\n\004mean\030\002 \001(\001\022\016\n\006stddev\030\003" +
      " \001(\001\022\021\n\tbias_mean\030\004 \001(\001\022\023\n\013bias_stddev\030\005" +
      " \001(\001\022\021\n\tprecision\030\006 \001(\001\"6\n\004Type\022\010\n\004NONE\020" +
      "\001\022\014\n\010GAUSSIAN\020\002\022\026\n\022GAUSSIAN_QUANTIZED\020\003"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_gazebo_msgs_SensorNoise_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gazebo_msgs_SensorNoise_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gazebo_msgs_SensorNoise_descriptor,
        new java.lang.String[] { "Type", "Mean", "Stddev", "BiasMean", "BiasStddev", "Precision", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
