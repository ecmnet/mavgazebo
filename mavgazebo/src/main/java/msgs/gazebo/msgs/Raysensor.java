// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raysensor.proto

package msgs.gazebo.msgs;

public final class Raysensor {
  private Raysensor() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface RaySensorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gazebo.msgs.RaySensor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool display_scan = 1;</code>
     * @return Whether the displayScan field is set.
     */
    boolean hasDisplayScan();
    /**
     * <code>optional bool display_scan = 1;</code>
     * @return The displayScan.
     */
    boolean getDisplayScan();

    /**
     * <code>optional int32 horizontal_samples = 2;</code>
     * @return Whether the horizontalSamples field is set.
     */
    boolean hasHorizontalSamples();
    /**
     * <code>optional int32 horizontal_samples = 2;</code>
     * @return The horizontalSamples.
     */
    int getHorizontalSamples();

    /**
     * <code>optional double horizontal_resolution = 3;</code>
     * @return Whether the horizontalResolution field is set.
     */
    boolean hasHorizontalResolution();
    /**
     * <code>optional double horizontal_resolution = 3;</code>
     * @return The horizontalResolution.
     */
    double getHorizontalResolution();

    /**
     * <code>optional double horizontal_min_angle = 4;</code>
     * @return Whether the horizontalMinAngle field is set.
     */
    boolean hasHorizontalMinAngle();
    /**
     * <code>optional double horizontal_min_angle = 4;</code>
     * @return The horizontalMinAngle.
     */
    double getHorizontalMinAngle();

    /**
     * <code>optional double horizontal_max_angle = 5;</code>
     * @return Whether the horizontalMaxAngle field is set.
     */
    boolean hasHorizontalMaxAngle();
    /**
     * <code>optional double horizontal_max_angle = 5;</code>
     * @return The horizontalMaxAngle.
     */
    double getHorizontalMaxAngle();

    /**
     * <code>optional int32 vertical_samples = 6;</code>
     * @return Whether the verticalSamples field is set.
     */
    boolean hasVerticalSamples();
    /**
     * <code>optional int32 vertical_samples = 6;</code>
     * @return The verticalSamples.
     */
    int getVerticalSamples();

    /**
     * <code>optional double vertical_resolution = 7;</code>
     * @return Whether the verticalResolution field is set.
     */
    boolean hasVerticalResolution();
    /**
     * <code>optional double vertical_resolution = 7;</code>
     * @return The verticalResolution.
     */
    double getVerticalResolution();

    /**
     * <code>optional double vertical_min_angle = 8;</code>
     * @return Whether the verticalMinAngle field is set.
     */
    boolean hasVerticalMinAngle();
    /**
     * <code>optional double vertical_min_angle = 8;</code>
     * @return The verticalMinAngle.
     */
    double getVerticalMinAngle();

    /**
     * <code>optional double vertical_max_angle = 9;</code>
     * @return Whether the verticalMaxAngle field is set.
     */
    boolean hasVerticalMaxAngle();
    /**
     * <code>optional double vertical_max_angle = 9;</code>
     * @return The verticalMaxAngle.
     */
    double getVerticalMaxAngle();

    /**
     * <code>optional double range_min = 10;</code>
     * @return Whether the rangeMin field is set.
     */
    boolean hasRangeMin();
    /**
     * <code>optional double range_min = 10;</code>
     * @return The rangeMin.
     */
    double getRangeMin();

    /**
     * <code>optional double range_max = 11;</code>
     * @return Whether the rangeMax field is set.
     */
    boolean hasRangeMax();
    /**
     * <code>optional double range_max = 11;</code>
     * @return The rangeMax.
     */
    double getRangeMax();

    /**
     * <code>optional double range_resolution = 12;</code>
     * @return Whether the rangeResolution field is set.
     */
    boolean hasRangeResolution();
    /**
     * <code>optional double range_resolution = 12;</code>
     * @return The rangeResolution.
     */
    double getRangeResolution();
  }
  /**
   * Protobuf type {@code gazebo.msgs.RaySensor}
   */
  public static final class RaySensor extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gazebo.msgs.RaySensor)
      RaySensorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RaySensor.newBuilder() to construct.
    private RaySensor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RaySensor() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RaySensor();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RaySensor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              displayScan_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              horizontalSamples_ = input.readInt32();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              horizontalResolution_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              horizontalMinAngle_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              horizontalMaxAngle_ = input.readDouble();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              verticalSamples_ = input.readInt32();
              break;
            }
            case 57: {
              bitField0_ |= 0x00000040;
              verticalResolution_ = input.readDouble();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              verticalMinAngle_ = input.readDouble();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              verticalMaxAngle_ = input.readDouble();
              break;
            }
            case 81: {
              bitField0_ |= 0x00000200;
              rangeMin_ = input.readDouble();
              break;
            }
            case 89: {
              bitField0_ |= 0x00000400;
              rangeMax_ = input.readDouble();
              break;
            }
            case 97: {
              bitField0_ |= 0x00000800;
              rangeResolution_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return msgs.gazebo.msgs.Raysensor.internal_static_gazebo_msgs_RaySensor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return msgs.gazebo.msgs.Raysensor.internal_static_gazebo_msgs_RaySensor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              msgs.gazebo.msgs.Raysensor.RaySensor.class, msgs.gazebo.msgs.Raysensor.RaySensor.Builder.class);
    }

    private int bitField0_;
    public static final int DISPLAY_SCAN_FIELD_NUMBER = 1;
    private boolean displayScan_;
    /**
     * <code>optional bool display_scan = 1;</code>
     * @return Whether the displayScan field is set.
     */
    @java.lang.Override
    public boolean hasDisplayScan() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional bool display_scan = 1;</code>
     * @return The displayScan.
     */
    @java.lang.Override
    public boolean getDisplayScan() {
      return displayScan_;
    }

    public static final int HORIZONTAL_SAMPLES_FIELD_NUMBER = 2;
    private int horizontalSamples_;
    /**
     * <code>optional int32 horizontal_samples = 2;</code>
     * @return Whether the horizontalSamples field is set.
     */
    @java.lang.Override
    public boolean hasHorizontalSamples() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional int32 horizontal_samples = 2;</code>
     * @return The horizontalSamples.
     */
    @java.lang.Override
    public int getHorizontalSamples() {
      return horizontalSamples_;
    }

    public static final int HORIZONTAL_RESOLUTION_FIELD_NUMBER = 3;
    private double horizontalResolution_;
    /**
     * <code>optional double horizontal_resolution = 3;</code>
     * @return Whether the horizontalResolution field is set.
     */
    @java.lang.Override
    public boolean hasHorizontalResolution() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional double horizontal_resolution = 3;</code>
     * @return The horizontalResolution.
     */
    @java.lang.Override
    public double getHorizontalResolution() {
      return horizontalResolution_;
    }

    public static final int HORIZONTAL_MIN_ANGLE_FIELD_NUMBER = 4;
    private double horizontalMinAngle_;
    /**
     * <code>optional double horizontal_min_angle = 4;</code>
     * @return Whether the horizontalMinAngle field is set.
     */
    @java.lang.Override
    public boolean hasHorizontalMinAngle() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional double horizontal_min_angle = 4;</code>
     * @return The horizontalMinAngle.
     */
    @java.lang.Override
    public double getHorizontalMinAngle() {
      return horizontalMinAngle_;
    }

    public static final int HORIZONTAL_MAX_ANGLE_FIELD_NUMBER = 5;
    private double horizontalMaxAngle_;
    /**
     * <code>optional double horizontal_max_angle = 5;</code>
     * @return Whether the horizontalMaxAngle field is set.
     */
    @java.lang.Override
    public boolean hasHorizontalMaxAngle() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional double horizontal_max_angle = 5;</code>
     * @return The horizontalMaxAngle.
     */
    @java.lang.Override
    public double getHorizontalMaxAngle() {
      return horizontalMaxAngle_;
    }

    public static final int VERTICAL_SAMPLES_FIELD_NUMBER = 6;
    private int verticalSamples_;
    /**
     * <code>optional int32 vertical_samples = 6;</code>
     * @return Whether the verticalSamples field is set.
     */
    @java.lang.Override
    public boolean hasVerticalSamples() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional int32 vertical_samples = 6;</code>
     * @return The verticalSamples.
     */
    @java.lang.Override
    public int getVerticalSamples() {
      return verticalSamples_;
    }

    public static final int VERTICAL_RESOLUTION_FIELD_NUMBER = 7;
    private double verticalResolution_;
    /**
     * <code>optional double vertical_resolution = 7;</code>
     * @return Whether the verticalResolution field is set.
     */
    @java.lang.Override
    public boolean hasVerticalResolution() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional double vertical_resolution = 7;</code>
     * @return The verticalResolution.
     */
    @java.lang.Override
    public double getVerticalResolution() {
      return verticalResolution_;
    }

    public static final int VERTICAL_MIN_ANGLE_FIELD_NUMBER = 8;
    private double verticalMinAngle_;
    /**
     * <code>optional double vertical_min_angle = 8;</code>
     * @return Whether the verticalMinAngle field is set.
     */
    @java.lang.Override
    public boolean hasVerticalMinAngle() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional double vertical_min_angle = 8;</code>
     * @return The verticalMinAngle.
     */
    @java.lang.Override
    public double getVerticalMinAngle() {
      return verticalMinAngle_;
    }

    public static final int VERTICAL_MAX_ANGLE_FIELD_NUMBER = 9;
    private double verticalMaxAngle_;
    /**
     * <code>optional double vertical_max_angle = 9;</code>
     * @return Whether the verticalMaxAngle field is set.
     */
    @java.lang.Override
    public boolean hasVerticalMaxAngle() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional double vertical_max_angle = 9;</code>
     * @return The verticalMaxAngle.
     */
    @java.lang.Override
    public double getVerticalMaxAngle() {
      return verticalMaxAngle_;
    }

    public static final int RANGE_MIN_FIELD_NUMBER = 10;
    private double rangeMin_;
    /**
     * <code>optional double range_min = 10;</code>
     * @return Whether the rangeMin field is set.
     */
    @java.lang.Override
    public boolean hasRangeMin() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional double range_min = 10;</code>
     * @return The rangeMin.
     */
    @java.lang.Override
    public double getRangeMin() {
      return rangeMin_;
    }

    public static final int RANGE_MAX_FIELD_NUMBER = 11;
    private double rangeMax_;
    /**
     * <code>optional double range_max = 11;</code>
     * @return Whether the rangeMax field is set.
     */
    @java.lang.Override
    public boolean hasRangeMax() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional double range_max = 11;</code>
     * @return The rangeMax.
     */
    @java.lang.Override
    public double getRangeMax() {
      return rangeMax_;
    }

    public static final int RANGE_RESOLUTION_FIELD_NUMBER = 12;
    private double rangeResolution_;
    /**
     * <code>optional double range_resolution = 12;</code>
     * @return Whether the rangeResolution field is set.
     */
    @java.lang.Override
    public boolean hasRangeResolution() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>optional double range_resolution = 12;</code>
     * @return The rangeResolution.
     */
    @java.lang.Override
    public double getRangeResolution() {
      return rangeResolution_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, displayScan_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeInt32(2, horizontalSamples_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeDouble(3, horizontalResolution_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeDouble(4, horizontalMinAngle_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeDouble(5, horizontalMaxAngle_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeInt32(6, verticalSamples_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeDouble(7, verticalResolution_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeDouble(8, verticalMinAngle_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeDouble(9, verticalMaxAngle_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeDouble(10, rangeMin_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeDouble(11, rangeMax_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeDouble(12, rangeResolution_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, displayScan_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, horizontalSamples_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, horizontalResolution_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, horizontalMinAngle_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, horizontalMaxAngle_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, verticalSamples_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, verticalResolution_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, verticalMinAngle_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, verticalMaxAngle_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, rangeMin_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, rangeMax_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(12, rangeResolution_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof msgs.gazebo.msgs.Raysensor.RaySensor)) {
        return super.equals(obj);
      }
      msgs.gazebo.msgs.Raysensor.RaySensor other = (msgs.gazebo.msgs.Raysensor.RaySensor) obj;

      if (hasDisplayScan() != other.hasDisplayScan()) return false;
      if (hasDisplayScan()) {
        if (getDisplayScan()
            != other.getDisplayScan()) return false;
      }
      if (hasHorizontalSamples() != other.hasHorizontalSamples()) return false;
      if (hasHorizontalSamples()) {
        if (getHorizontalSamples()
            != other.getHorizontalSamples()) return false;
      }
      if (hasHorizontalResolution() != other.hasHorizontalResolution()) return false;
      if (hasHorizontalResolution()) {
        if (java.lang.Double.doubleToLongBits(getHorizontalResolution())
            != java.lang.Double.doubleToLongBits(
                other.getHorizontalResolution())) return false;
      }
      if (hasHorizontalMinAngle() != other.hasHorizontalMinAngle()) return false;
      if (hasHorizontalMinAngle()) {
        if (java.lang.Double.doubleToLongBits(getHorizontalMinAngle())
            != java.lang.Double.doubleToLongBits(
                other.getHorizontalMinAngle())) return false;
      }
      if (hasHorizontalMaxAngle() != other.hasHorizontalMaxAngle()) return false;
      if (hasHorizontalMaxAngle()) {
        if (java.lang.Double.doubleToLongBits(getHorizontalMaxAngle())
            != java.lang.Double.doubleToLongBits(
                other.getHorizontalMaxAngle())) return false;
      }
      if (hasVerticalSamples() != other.hasVerticalSamples()) return false;
      if (hasVerticalSamples()) {
        if (getVerticalSamples()
            != other.getVerticalSamples()) return false;
      }
      if (hasVerticalResolution() != other.hasVerticalResolution()) return false;
      if (hasVerticalResolution()) {
        if (java.lang.Double.doubleToLongBits(getVerticalResolution())
            != java.lang.Double.doubleToLongBits(
                other.getVerticalResolution())) return false;
      }
      if (hasVerticalMinAngle() != other.hasVerticalMinAngle()) return false;
      if (hasVerticalMinAngle()) {
        if (java.lang.Double.doubleToLongBits(getVerticalMinAngle())
            != java.lang.Double.doubleToLongBits(
                other.getVerticalMinAngle())) return false;
      }
      if (hasVerticalMaxAngle() != other.hasVerticalMaxAngle()) return false;
      if (hasVerticalMaxAngle()) {
        if (java.lang.Double.doubleToLongBits(getVerticalMaxAngle())
            != java.lang.Double.doubleToLongBits(
                other.getVerticalMaxAngle())) return false;
      }
      if (hasRangeMin() != other.hasRangeMin()) return false;
      if (hasRangeMin()) {
        if (java.lang.Double.doubleToLongBits(getRangeMin())
            != java.lang.Double.doubleToLongBits(
                other.getRangeMin())) return false;
      }
      if (hasRangeMax() != other.hasRangeMax()) return false;
      if (hasRangeMax()) {
        if (java.lang.Double.doubleToLongBits(getRangeMax())
            != java.lang.Double.doubleToLongBits(
                other.getRangeMax())) return false;
      }
      if (hasRangeResolution() != other.hasRangeResolution()) return false;
      if (hasRangeResolution()) {
        if (java.lang.Double.doubleToLongBits(getRangeResolution())
            != java.lang.Double.doubleToLongBits(
                other.getRangeResolution())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDisplayScan()) {
        hash = (37 * hash) + DISPLAY_SCAN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getDisplayScan());
      }
      if (hasHorizontalSamples()) {
        hash = (37 * hash) + HORIZONTAL_SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getHorizontalSamples();
      }
      if (hasHorizontalResolution()) {
        hash = (37 * hash) + HORIZONTAL_RESOLUTION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getHorizontalResolution()));
      }
      if (hasHorizontalMinAngle()) {
        hash = (37 * hash) + HORIZONTAL_MIN_ANGLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getHorizontalMinAngle()));
      }
      if (hasHorizontalMaxAngle()) {
        hash = (37 * hash) + HORIZONTAL_MAX_ANGLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getHorizontalMaxAngle()));
      }
      if (hasVerticalSamples()) {
        hash = (37 * hash) + VERTICAL_SAMPLES_FIELD_NUMBER;
        hash = (53 * hash) + getVerticalSamples();
      }
      if (hasVerticalResolution()) {
        hash = (37 * hash) + VERTICAL_RESOLUTION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getVerticalResolution()));
      }
      if (hasVerticalMinAngle()) {
        hash = (37 * hash) + VERTICAL_MIN_ANGLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getVerticalMinAngle()));
      }
      if (hasVerticalMaxAngle()) {
        hash = (37 * hash) + VERTICAL_MAX_ANGLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getVerticalMaxAngle()));
      }
      if (hasRangeMin()) {
        hash = (37 * hash) + RANGE_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getRangeMin()));
      }
      if (hasRangeMax()) {
        hash = (37 * hash) + RANGE_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getRangeMax()));
      }
      if (hasRangeResolution()) {
        hash = (37 * hash) + RANGE_RESOLUTION_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getRangeResolution()));
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static msgs.gazebo.msgs.Raysensor.RaySensor parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static msgs.gazebo.msgs.Raysensor.RaySensor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(msgs.gazebo.msgs.Raysensor.RaySensor prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.RaySensor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gazebo.msgs.RaySensor)
        msgs.gazebo.msgs.Raysensor.RaySensorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return msgs.gazebo.msgs.Raysensor.internal_static_gazebo_msgs_RaySensor_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return msgs.gazebo.msgs.Raysensor.internal_static_gazebo_msgs_RaySensor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                msgs.gazebo.msgs.Raysensor.RaySensor.class, msgs.gazebo.msgs.Raysensor.RaySensor.Builder.class);
      }

      // Construct using gazebo.msgs.Raysensor.RaySensor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        displayScan_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        horizontalSamples_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        horizontalResolution_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        horizontalMinAngle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        horizontalMaxAngle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        verticalSamples_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        verticalResolution_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000040);
        verticalMinAngle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        verticalMaxAngle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        rangeMin_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000200);
        rangeMax_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000400);
        rangeResolution_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return msgs.gazebo.msgs.Raysensor.internal_static_gazebo_msgs_RaySensor_descriptor;
      }

      @java.lang.Override
      public msgs.gazebo.msgs.Raysensor.RaySensor getDefaultInstanceForType() {
        return msgs.gazebo.msgs.Raysensor.RaySensor.getDefaultInstance();
      }

      @java.lang.Override
      public msgs.gazebo.msgs.Raysensor.RaySensor build() {
        msgs.gazebo.msgs.Raysensor.RaySensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public msgs.gazebo.msgs.Raysensor.RaySensor buildPartial() {
        msgs.gazebo.msgs.Raysensor.RaySensor result = new msgs.gazebo.msgs.Raysensor.RaySensor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.displayScan_ = displayScan_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.horizontalSamples_ = horizontalSamples_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.horizontalResolution_ = horizontalResolution_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.horizontalMinAngle_ = horizontalMinAngle_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.horizontalMaxAngle_ = horizontalMaxAngle_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.verticalSamples_ = verticalSamples_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.verticalResolution_ = verticalResolution_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.verticalMinAngle_ = verticalMinAngle_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.verticalMaxAngle_ = verticalMaxAngle_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.rangeMin_ = rangeMin_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.rangeMax_ = rangeMax_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.rangeResolution_ = rangeResolution_;
          to_bitField0_ |= 0x00000800;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof msgs.gazebo.msgs.Raysensor.RaySensor) {
          return mergeFrom((msgs.gazebo.msgs.Raysensor.RaySensor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(msgs.gazebo.msgs.Raysensor.RaySensor other) {
        if (other == msgs.gazebo.msgs.Raysensor.RaySensor.getDefaultInstance()) return this;
        if (other.hasDisplayScan()) {
          setDisplayScan(other.getDisplayScan());
        }
        if (other.hasHorizontalSamples()) {
          setHorizontalSamples(other.getHorizontalSamples());
        }
        if (other.hasHorizontalResolution()) {
          setHorizontalResolution(other.getHorizontalResolution());
        }
        if (other.hasHorizontalMinAngle()) {
          setHorizontalMinAngle(other.getHorizontalMinAngle());
        }
        if (other.hasHorizontalMaxAngle()) {
          setHorizontalMaxAngle(other.getHorizontalMaxAngle());
        }
        if (other.hasVerticalSamples()) {
          setVerticalSamples(other.getVerticalSamples());
        }
        if (other.hasVerticalResolution()) {
          setVerticalResolution(other.getVerticalResolution());
        }
        if (other.hasVerticalMinAngle()) {
          setVerticalMinAngle(other.getVerticalMinAngle());
        }
        if (other.hasVerticalMaxAngle()) {
          setVerticalMaxAngle(other.getVerticalMaxAngle());
        }
        if (other.hasRangeMin()) {
          setRangeMin(other.getRangeMin());
        }
        if (other.hasRangeMax()) {
          setRangeMax(other.getRangeMax());
        }
        if (other.hasRangeResolution()) {
          setRangeResolution(other.getRangeResolution());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        msgs.gazebo.msgs.Raysensor.RaySensor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (msgs.gazebo.msgs.Raysensor.RaySensor) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean displayScan_ ;
      /**
       * <code>optional bool display_scan = 1;</code>
       * @return Whether the displayScan field is set.
       */
      @java.lang.Override
      public boolean hasDisplayScan() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional bool display_scan = 1;</code>
       * @return The displayScan.
       */
      @java.lang.Override
      public boolean getDisplayScan() {
        return displayScan_;
      }
      /**
       * <code>optional bool display_scan = 1;</code>
       * @param value The displayScan to set.
       * @return This builder for chaining.
       */
      public Builder setDisplayScan(boolean value) {
        bitField0_ |= 0x00000001;
        displayScan_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool display_scan = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDisplayScan() {
        bitField0_ = (bitField0_ & ~0x00000001);
        displayScan_ = false;
        onChanged();
        return this;
      }

      private int horizontalSamples_ ;
      /**
       * <code>optional int32 horizontal_samples = 2;</code>
       * @return Whether the horizontalSamples field is set.
       */
      @java.lang.Override
      public boolean hasHorizontalSamples() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional int32 horizontal_samples = 2;</code>
       * @return The horizontalSamples.
       */
      @java.lang.Override
      public int getHorizontalSamples() {
        return horizontalSamples_;
      }
      /**
       * <code>optional int32 horizontal_samples = 2;</code>
       * @param value The horizontalSamples to set.
       * @return This builder for chaining.
       */
      public Builder setHorizontalSamples(int value) {
        bitField0_ |= 0x00000002;
        horizontalSamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 horizontal_samples = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearHorizontalSamples() {
        bitField0_ = (bitField0_ & ~0x00000002);
        horizontalSamples_ = 0;
        onChanged();
        return this;
      }

      private double horizontalResolution_ ;
      /**
       * <code>optional double horizontal_resolution = 3;</code>
       * @return Whether the horizontalResolution field is set.
       */
      @java.lang.Override
      public boolean hasHorizontalResolution() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional double horizontal_resolution = 3;</code>
       * @return The horizontalResolution.
       */
      @java.lang.Override
      public double getHorizontalResolution() {
        return horizontalResolution_;
      }
      /**
       * <code>optional double horizontal_resolution = 3;</code>
       * @param value The horizontalResolution to set.
       * @return This builder for chaining.
       */
      public Builder setHorizontalResolution(double value) {
        bitField0_ |= 0x00000004;
        horizontalResolution_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double horizontal_resolution = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearHorizontalResolution() {
        bitField0_ = (bitField0_ & ~0x00000004);
        horizontalResolution_ = 0D;
        onChanged();
        return this;
      }

      private double horizontalMinAngle_ ;
      /**
       * <code>optional double horizontal_min_angle = 4;</code>
       * @return Whether the horizontalMinAngle field is set.
       */
      @java.lang.Override
      public boolean hasHorizontalMinAngle() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional double horizontal_min_angle = 4;</code>
       * @return The horizontalMinAngle.
       */
      @java.lang.Override
      public double getHorizontalMinAngle() {
        return horizontalMinAngle_;
      }
      /**
       * <code>optional double horizontal_min_angle = 4;</code>
       * @param value The horizontalMinAngle to set.
       * @return This builder for chaining.
       */
      public Builder setHorizontalMinAngle(double value) {
        bitField0_ |= 0x00000008;
        horizontalMinAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double horizontal_min_angle = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearHorizontalMinAngle() {
        bitField0_ = (bitField0_ & ~0x00000008);
        horizontalMinAngle_ = 0D;
        onChanged();
        return this;
      }

      private double horizontalMaxAngle_ ;
      /**
       * <code>optional double horizontal_max_angle = 5;</code>
       * @return Whether the horizontalMaxAngle field is set.
       */
      @java.lang.Override
      public boolean hasHorizontalMaxAngle() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional double horizontal_max_angle = 5;</code>
       * @return The horizontalMaxAngle.
       */
      @java.lang.Override
      public double getHorizontalMaxAngle() {
        return horizontalMaxAngle_;
      }
      /**
       * <code>optional double horizontal_max_angle = 5;</code>
       * @param value The horizontalMaxAngle to set.
       * @return This builder for chaining.
       */
      public Builder setHorizontalMaxAngle(double value) {
        bitField0_ |= 0x00000010;
        horizontalMaxAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double horizontal_max_angle = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearHorizontalMaxAngle() {
        bitField0_ = (bitField0_ & ~0x00000010);
        horizontalMaxAngle_ = 0D;
        onChanged();
        return this;
      }

      private int verticalSamples_ ;
      /**
       * <code>optional int32 vertical_samples = 6;</code>
       * @return Whether the verticalSamples field is set.
       */
      @java.lang.Override
      public boolean hasVerticalSamples() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional int32 vertical_samples = 6;</code>
       * @return The verticalSamples.
       */
      @java.lang.Override
      public int getVerticalSamples() {
        return verticalSamples_;
      }
      /**
       * <code>optional int32 vertical_samples = 6;</code>
       * @param value The verticalSamples to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalSamples(int value) {
        bitField0_ |= 0x00000020;
        verticalSamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 vertical_samples = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalSamples() {
        bitField0_ = (bitField0_ & ~0x00000020);
        verticalSamples_ = 0;
        onChanged();
        return this;
      }

      private double verticalResolution_ ;
      /**
       * <code>optional double vertical_resolution = 7;</code>
       * @return Whether the verticalResolution field is set.
       */
      @java.lang.Override
      public boolean hasVerticalResolution() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional double vertical_resolution = 7;</code>
       * @return The verticalResolution.
       */
      @java.lang.Override
      public double getVerticalResolution() {
        return verticalResolution_;
      }
      /**
       * <code>optional double vertical_resolution = 7;</code>
       * @param value The verticalResolution to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalResolution(double value) {
        bitField0_ |= 0x00000040;
        verticalResolution_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_resolution = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalResolution() {
        bitField0_ = (bitField0_ & ~0x00000040);
        verticalResolution_ = 0D;
        onChanged();
        return this;
      }

      private double verticalMinAngle_ ;
      /**
       * <code>optional double vertical_min_angle = 8;</code>
       * @return Whether the verticalMinAngle field is set.
       */
      @java.lang.Override
      public boolean hasVerticalMinAngle() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional double vertical_min_angle = 8;</code>
       * @return The verticalMinAngle.
       */
      @java.lang.Override
      public double getVerticalMinAngle() {
        return verticalMinAngle_;
      }
      /**
       * <code>optional double vertical_min_angle = 8;</code>
       * @param value The verticalMinAngle to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalMinAngle(double value) {
        bitField0_ |= 0x00000080;
        verticalMinAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_min_angle = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalMinAngle() {
        bitField0_ = (bitField0_ & ~0x00000080);
        verticalMinAngle_ = 0D;
        onChanged();
        return this;
      }

      private double verticalMaxAngle_ ;
      /**
       * <code>optional double vertical_max_angle = 9;</code>
       * @return Whether the verticalMaxAngle field is set.
       */
      @java.lang.Override
      public boolean hasVerticalMaxAngle() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional double vertical_max_angle = 9;</code>
       * @return The verticalMaxAngle.
       */
      @java.lang.Override
      public double getVerticalMaxAngle() {
        return verticalMaxAngle_;
      }
      /**
       * <code>optional double vertical_max_angle = 9;</code>
       * @param value The verticalMaxAngle to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalMaxAngle(double value) {
        bitField0_ |= 0x00000100;
        verticalMaxAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_max_angle = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalMaxAngle() {
        bitField0_ = (bitField0_ & ~0x00000100);
        verticalMaxAngle_ = 0D;
        onChanged();
        return this;
      }

      private double rangeMin_ ;
      /**
       * <code>optional double range_min = 10;</code>
       * @return Whether the rangeMin field is set.
       */
      @java.lang.Override
      public boolean hasRangeMin() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional double range_min = 10;</code>
       * @return The rangeMin.
       */
      @java.lang.Override
      public double getRangeMin() {
        return rangeMin_;
      }
      /**
       * <code>optional double range_min = 10;</code>
       * @param value The rangeMin to set.
       * @return This builder for chaining.
       */
      public Builder setRangeMin(double value) {
        bitField0_ |= 0x00000200;
        rangeMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double range_min = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearRangeMin() {
        bitField0_ = (bitField0_ & ~0x00000200);
        rangeMin_ = 0D;
        onChanged();
        return this;
      }

      private double rangeMax_ ;
      /**
       * <code>optional double range_max = 11;</code>
       * @return Whether the rangeMax field is set.
       */
      @java.lang.Override
      public boolean hasRangeMax() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>optional double range_max = 11;</code>
       * @return The rangeMax.
       */
      @java.lang.Override
      public double getRangeMax() {
        return rangeMax_;
      }
      /**
       * <code>optional double range_max = 11;</code>
       * @param value The rangeMax to set.
       * @return This builder for chaining.
       */
      public Builder setRangeMax(double value) {
        bitField0_ |= 0x00000400;
        rangeMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double range_max = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearRangeMax() {
        bitField0_ = (bitField0_ & ~0x00000400);
        rangeMax_ = 0D;
        onChanged();
        return this;
      }

      private double rangeResolution_ ;
      /**
       * <code>optional double range_resolution = 12;</code>
       * @return Whether the rangeResolution field is set.
       */
      @java.lang.Override
      public boolean hasRangeResolution() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>optional double range_resolution = 12;</code>
       * @return The rangeResolution.
       */
      @java.lang.Override
      public double getRangeResolution() {
        return rangeResolution_;
      }
      /**
       * <code>optional double range_resolution = 12;</code>
       * @param value The rangeResolution to set.
       * @return This builder for chaining.
       */
      public Builder setRangeResolution(double value) {
        bitField0_ |= 0x00000800;
        rangeResolution_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double range_resolution = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearRangeResolution() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rangeResolution_ = 0D;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:gazebo.msgs.RaySensor)
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.RaySensor)
    private static final msgs.gazebo.msgs.Raysensor.RaySensor DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new msgs.gazebo.msgs.Raysensor.RaySensor();
    }

    public static msgs.gazebo.msgs.Raysensor.RaySensor getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<RaySensor>
        PARSER = new com.google.protobuf.AbstractParser<RaySensor>() {
      @java.lang.Override
      public RaySensor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RaySensor(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RaySensor> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RaySensor> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public msgs.gazebo.msgs.Raysensor.RaySensor getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_RaySensor_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gazebo_msgs_RaySensor_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017raysensor.proto\022\013gazebo.msgs\"\307\002\n\tRaySe" +
      "nsor\022\024\n\014display_scan\030\001 \001(\010\022\032\n\022horizontal" +
      "_samples\030\002 \001(\005\022\035\n\025horizontal_resolution\030" +
      "\003 \001(\001\022\034\n\024horizontal_min_angle\030\004 \001(\001\022\034\n\024h" +
      "orizontal_max_angle\030\005 \001(\001\022\030\n\020vertical_sa" +
      "mples\030\006 \001(\005\022\033\n\023vertical_resolution\030\007 \001(\001" +
      "\022\032\n\022vertical_min_angle\030\010 \001(\001\022\032\n\022vertical" +
      "_max_angle\030\t \001(\001\022\021\n\trange_min\030\n \001(\001\022\021\n\tr" +
      "ange_max\030\013 \001(\001\022\030\n\020range_resolution\030\014 \001(\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_gazebo_msgs_RaySensor_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gazebo_msgs_RaySensor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gazebo_msgs_RaySensor_descriptor,
        new java.lang.String[] { "DisplayScan", "HorizontalSamples", "HorizontalResolution", "HorizontalMinAngle", "HorizontalMaxAngle", "VerticalSamples", "VerticalResolution", "VerticalMinAngle", "VerticalMaxAngle", "RangeMin", "RangeMax", "RangeResolution", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
