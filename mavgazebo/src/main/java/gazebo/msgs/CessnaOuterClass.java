// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cessna.proto

package gazebo.msgs;

public final class CessnaOuterClass {
  private CessnaOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CessnaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gazebo.msgs.Cessna)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *&#47; &#92;brief Current RPM of the propeller.
     * </pre>
     *
     * <code>optional float propeller_speed = 1;</code>
     * @return Whether the propellerSpeed field is set.
     */
    boolean hasPropellerSpeed();
    /**
     * <pre>
     *&#47; &#92;brief Current RPM of the propeller.
     * </pre>
     *
     * <code>optional float propeller_speed = 1;</code>
     * @return The propellerSpeed.
     */
    float getPropellerSpeed();

    /**
     * <pre>
     *&#47; &#92;brief Current left aileron angle in rads.
     * </pre>
     *
     * <code>optional float left_aileron = 2;</code>
     * @return Whether the leftAileron field is set.
     */
    boolean hasLeftAileron();
    /**
     * <pre>
     *&#47; &#92;brief Current left aileron angle in rads.
     * </pre>
     *
     * <code>optional float left_aileron = 2;</code>
     * @return The leftAileron.
     */
    float getLeftAileron();

    /**
     * <pre>
     *&#47; &#92;brief Current left flap angle in rads.
     * </pre>
     *
     * <code>optional float left_flap = 3;</code>
     * @return Whether the leftFlap field is set.
     */
    boolean hasLeftFlap();
    /**
     * <pre>
     *&#47; &#92;brief Current left flap angle in rads.
     * </pre>
     *
     * <code>optional float left_flap = 3;</code>
     * @return The leftFlap.
     */
    float getLeftFlap();

    /**
     * <pre>
     *&#47; &#92;brief Current right aileron angle in rads.
     * </pre>
     *
     * <code>optional float right_aileron = 4;</code>
     * @return Whether the rightAileron field is set.
     */
    boolean hasRightAileron();
    /**
     * <pre>
     *&#47; &#92;brief Current right aileron angle in rads.
     * </pre>
     *
     * <code>optional float right_aileron = 4;</code>
     * @return The rightAileron.
     */
    float getRightAileron();

    /**
     * <pre>
     *&#47; &#92;brief Current right flap angle in rads.
     * </pre>
     *
     * <code>optional float right_flap = 5;</code>
     * @return Whether the rightFlap field is set.
     */
    boolean hasRightFlap();
    /**
     * <pre>
     *&#47; &#92;brief Current right flap angle in rads.
     * </pre>
     *
     * <code>optional float right_flap = 5;</code>
     * @return The rightFlap.
     */
    float getRightFlap();

    /**
     * <pre>
     *&#47; &#92;brief Current elevators angle in rads.
     * </pre>
     *
     * <code>optional float elevators = 6;</code>
     * @return Whether the elevators field is set.
     */
    boolean hasElevators();
    /**
     * <pre>
     *&#47; &#92;brief Current elevators angle in rads.
     * </pre>
     *
     * <code>optional float elevators = 6;</code>
     * @return The elevators.
     */
    float getElevators();

    /**
     * <pre>
     *&#47; &#92;brief Current ruddle angle in rads.
     * </pre>
     *
     * <code>optional float rudder = 7;</code>
     * @return Whether the rudder field is set.
     */
    boolean hasRudder();
    /**
     * <pre>
     *&#47; &#92;brief Current ruddle angle in rads.
     * </pre>
     *
     * <code>optional float rudder = 7;</code>
     * @return The rudder.
     */
    float getRudder();

    /**
     * <pre>
     *&#47; &#92;brief Target RPM of the propeller.
     * </pre>
     *
     * <code>optional float cmd_propeller_speed = 8;</code>
     * @return Whether the cmdPropellerSpeed field is set.
     */
    boolean hasCmdPropellerSpeed();
    /**
     * <pre>
     *&#47; &#92;brief Target RPM of the propeller.
     * </pre>
     *
     * <code>optional float cmd_propeller_speed = 8;</code>
     * @return The cmdPropellerSpeed.
     */
    float getCmdPropellerSpeed();

    /**
     * <pre>
     *&#47; &#92;brief Target left aileron angle in rads.
     * </pre>
     *
     * <code>optional float cmd_left_aileron = 9;</code>
     * @return Whether the cmdLeftAileron field is set.
     */
    boolean hasCmdLeftAileron();
    /**
     * <pre>
     *&#47; &#92;brief Target left aileron angle in rads.
     * </pre>
     *
     * <code>optional float cmd_left_aileron = 9;</code>
     * @return The cmdLeftAileron.
     */
    float getCmdLeftAileron();

    /**
     * <pre>
     *&#47; &#92;brief Target left flap angle in rads.
     * </pre>
     *
     * <code>optional float cmd_left_flap = 10;</code>
     * @return Whether the cmdLeftFlap field is set.
     */
    boolean hasCmdLeftFlap();
    /**
     * <pre>
     *&#47; &#92;brief Target left flap angle in rads.
     * </pre>
     *
     * <code>optional float cmd_left_flap = 10;</code>
     * @return The cmdLeftFlap.
     */
    float getCmdLeftFlap();

    /**
     * <pre>
     *&#47; &#92;brief Target right aileron angle in rads.
     * </pre>
     *
     * <code>optional float cmd_right_aileron = 11;</code>
     * @return Whether the cmdRightAileron field is set.
     */
    boolean hasCmdRightAileron();
    /**
     * <pre>
     *&#47; &#92;brief Target right aileron angle in rads.
     * </pre>
     *
     * <code>optional float cmd_right_aileron = 11;</code>
     * @return The cmdRightAileron.
     */
    float getCmdRightAileron();

    /**
     * <pre>
     *&#47; &#92;brief Target right flap angle in rads.
     * </pre>
     *
     * <code>optional float cmd_right_flap = 12;</code>
     * @return Whether the cmdRightFlap field is set.
     */
    boolean hasCmdRightFlap();
    /**
     * <pre>
     *&#47; &#92;brief Target right flap angle in rads.
     * </pre>
     *
     * <code>optional float cmd_right_flap = 12;</code>
     * @return The cmdRightFlap.
     */
    float getCmdRightFlap();

    /**
     * <pre>
     *&#47; &#92;brief Target elevators angle in rads.
     * </pre>
     *
     * <code>optional float cmd_elevators = 13;</code>
     * @return Whether the cmdElevators field is set.
     */
    boolean hasCmdElevators();
    /**
     * <pre>
     *&#47; &#92;brief Target elevators angle in rads.
     * </pre>
     *
     * <code>optional float cmd_elevators = 13;</code>
     * @return The cmdElevators.
     */
    float getCmdElevators();

    /**
     * <pre>
     *&#47; &#92;brief Target ruddle angle in rads.
     * </pre>
     *
     * <code>optional float cmd_rudder = 14;</code>
     * @return Whether the cmdRudder field is set.
     */
    boolean hasCmdRudder();
    /**
     * <pre>
     *&#47; &#92;brief Target ruddle angle in rads.
     * </pre>
     *
     * <code>optional float cmd_rudder = 14;</code>
     * @return The cmdRudder.
     */
    float getCmdRudder();
  }
  /**
   * Protobuf type {@code gazebo.msgs.Cessna}
   */
  public static final class Cessna extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gazebo.msgs.Cessna)
      CessnaOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Cessna.newBuilder() to construct.
    private Cessna(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Cessna() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Cessna();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gazebo.msgs.CessnaOuterClass.internal_static_gazebo_msgs_Cessna_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gazebo.msgs.CessnaOuterClass.internal_static_gazebo_msgs_Cessna_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gazebo.msgs.CessnaOuterClass.Cessna.class, gazebo.msgs.CessnaOuterClass.Cessna.Builder.class);
    }

    private int bitField0_;
    public static final int PROPELLER_SPEED_FIELD_NUMBER = 1;
    private float propellerSpeed_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Current RPM of the propeller.
     * </pre>
     *
     * <code>optional float propeller_speed = 1;</code>
     * @return Whether the propellerSpeed field is set.
     */
    @java.lang.Override
    public boolean hasPropellerSpeed() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Current RPM of the propeller.
     * </pre>
     *
     * <code>optional float propeller_speed = 1;</code>
     * @return The propellerSpeed.
     */
    @java.lang.Override
    public float getPropellerSpeed() {
      return propellerSpeed_;
    }

    public static final int LEFT_AILERON_FIELD_NUMBER = 2;
    private float leftAileron_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Current left aileron angle in rads.
     * </pre>
     *
     * <code>optional float left_aileron = 2;</code>
     * @return Whether the leftAileron field is set.
     */
    @java.lang.Override
    public boolean hasLeftAileron() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Current left aileron angle in rads.
     * </pre>
     *
     * <code>optional float left_aileron = 2;</code>
     * @return The leftAileron.
     */
    @java.lang.Override
    public float getLeftAileron() {
      return leftAileron_;
    }

    public static final int LEFT_FLAP_FIELD_NUMBER = 3;
    private float leftFlap_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Current left flap angle in rads.
     * </pre>
     *
     * <code>optional float left_flap = 3;</code>
     * @return Whether the leftFlap field is set.
     */
    @java.lang.Override
    public boolean hasLeftFlap() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Current left flap angle in rads.
     * </pre>
     *
     * <code>optional float left_flap = 3;</code>
     * @return The leftFlap.
     */
    @java.lang.Override
    public float getLeftFlap() {
      return leftFlap_;
    }

    public static final int RIGHT_AILERON_FIELD_NUMBER = 4;
    private float rightAileron_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Current right aileron angle in rads.
     * </pre>
     *
     * <code>optional float right_aileron = 4;</code>
     * @return Whether the rightAileron field is set.
     */
    @java.lang.Override
    public boolean hasRightAileron() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Current right aileron angle in rads.
     * </pre>
     *
     * <code>optional float right_aileron = 4;</code>
     * @return The rightAileron.
     */
    @java.lang.Override
    public float getRightAileron() {
      return rightAileron_;
    }

    public static final int RIGHT_FLAP_FIELD_NUMBER = 5;
    private float rightFlap_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Current right flap angle in rads.
     * </pre>
     *
     * <code>optional float right_flap = 5;</code>
     * @return Whether the rightFlap field is set.
     */
    @java.lang.Override
    public boolean hasRightFlap() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Current right flap angle in rads.
     * </pre>
     *
     * <code>optional float right_flap = 5;</code>
     * @return The rightFlap.
     */
    @java.lang.Override
    public float getRightFlap() {
      return rightFlap_;
    }

    public static final int ELEVATORS_FIELD_NUMBER = 6;
    private float elevators_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Current elevators angle in rads.
     * </pre>
     *
     * <code>optional float elevators = 6;</code>
     * @return Whether the elevators field is set.
     */
    @java.lang.Override
    public boolean hasElevators() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Current elevators angle in rads.
     * </pre>
     *
     * <code>optional float elevators = 6;</code>
     * @return The elevators.
     */
    @java.lang.Override
    public float getElevators() {
      return elevators_;
    }

    public static final int RUDDER_FIELD_NUMBER = 7;
    private float rudder_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Current ruddle angle in rads.
     * </pre>
     *
     * <code>optional float rudder = 7;</code>
     * @return Whether the rudder field is set.
     */
    @java.lang.Override
    public boolean hasRudder() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Current ruddle angle in rads.
     * </pre>
     *
     * <code>optional float rudder = 7;</code>
     * @return The rudder.
     */
    @java.lang.Override
    public float getRudder() {
      return rudder_;
    }

    public static final int CMD_PROPELLER_SPEED_FIELD_NUMBER = 8;
    private float cmdPropellerSpeed_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Target RPM of the propeller.
     * </pre>
     *
     * <code>optional float cmd_propeller_speed = 8;</code>
     * @return Whether the cmdPropellerSpeed field is set.
     */
    @java.lang.Override
    public boolean hasCmdPropellerSpeed() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Target RPM of the propeller.
     * </pre>
     *
     * <code>optional float cmd_propeller_speed = 8;</code>
     * @return The cmdPropellerSpeed.
     */
    @java.lang.Override
    public float getCmdPropellerSpeed() {
      return cmdPropellerSpeed_;
    }

    public static final int CMD_LEFT_AILERON_FIELD_NUMBER = 9;
    private float cmdLeftAileron_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Target left aileron angle in rads.
     * </pre>
     *
     * <code>optional float cmd_left_aileron = 9;</code>
     * @return Whether the cmdLeftAileron field is set.
     */
    @java.lang.Override
    public boolean hasCmdLeftAileron() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Target left aileron angle in rads.
     * </pre>
     *
     * <code>optional float cmd_left_aileron = 9;</code>
     * @return The cmdLeftAileron.
     */
    @java.lang.Override
    public float getCmdLeftAileron() {
      return cmdLeftAileron_;
    }

    public static final int CMD_LEFT_FLAP_FIELD_NUMBER = 10;
    private float cmdLeftFlap_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Target left flap angle in rads.
     * </pre>
     *
     * <code>optional float cmd_left_flap = 10;</code>
     * @return Whether the cmdLeftFlap field is set.
     */
    @java.lang.Override
    public boolean hasCmdLeftFlap() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Target left flap angle in rads.
     * </pre>
     *
     * <code>optional float cmd_left_flap = 10;</code>
     * @return The cmdLeftFlap.
     */
    @java.lang.Override
    public float getCmdLeftFlap() {
      return cmdLeftFlap_;
    }

    public static final int CMD_RIGHT_AILERON_FIELD_NUMBER = 11;
    private float cmdRightAileron_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Target right aileron angle in rads.
     * </pre>
     *
     * <code>optional float cmd_right_aileron = 11;</code>
     * @return Whether the cmdRightAileron field is set.
     */
    @java.lang.Override
    public boolean hasCmdRightAileron() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Target right aileron angle in rads.
     * </pre>
     *
     * <code>optional float cmd_right_aileron = 11;</code>
     * @return The cmdRightAileron.
     */
    @java.lang.Override
    public float getCmdRightAileron() {
      return cmdRightAileron_;
    }

    public static final int CMD_RIGHT_FLAP_FIELD_NUMBER = 12;
    private float cmdRightFlap_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Target right flap angle in rads.
     * </pre>
     *
     * <code>optional float cmd_right_flap = 12;</code>
     * @return Whether the cmdRightFlap field is set.
     */
    @java.lang.Override
    public boolean hasCmdRightFlap() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Target right flap angle in rads.
     * </pre>
     *
     * <code>optional float cmd_right_flap = 12;</code>
     * @return The cmdRightFlap.
     */
    @java.lang.Override
    public float getCmdRightFlap() {
      return cmdRightFlap_;
    }

    public static final int CMD_ELEVATORS_FIELD_NUMBER = 13;
    private float cmdElevators_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Target elevators angle in rads.
     * </pre>
     *
     * <code>optional float cmd_elevators = 13;</code>
     * @return Whether the cmdElevators field is set.
     */
    @java.lang.Override
    public boolean hasCmdElevators() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Target elevators angle in rads.
     * </pre>
     *
     * <code>optional float cmd_elevators = 13;</code>
     * @return The cmdElevators.
     */
    @java.lang.Override
    public float getCmdElevators() {
      return cmdElevators_;
    }

    public static final int CMD_RUDDER_FIELD_NUMBER = 14;
    private float cmdRudder_ = 0F;
    /**
     * <pre>
     *&#47; &#92;brief Target ruddle angle in rads.
     * </pre>
     *
     * <code>optional float cmd_rudder = 14;</code>
     * @return Whether the cmdRudder field is set.
     */
    @java.lang.Override
    public boolean hasCmdRudder() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Target ruddle angle in rads.
     * </pre>
     *
     * <code>optional float cmd_rudder = 14;</code>
     * @return The cmdRudder.
     */
    @java.lang.Override
    public float getCmdRudder() {
      return cmdRudder_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeFloat(1, propellerSpeed_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeFloat(2, leftAileron_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeFloat(3, leftFlap_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeFloat(4, rightAileron_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeFloat(5, rightFlap_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeFloat(6, elevators_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeFloat(7, rudder_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeFloat(8, cmdPropellerSpeed_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeFloat(9, cmdLeftAileron_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeFloat(10, cmdLeftFlap_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeFloat(11, cmdRightAileron_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeFloat(12, cmdRightFlap_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        output.writeFloat(13, cmdElevators_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        output.writeFloat(14, cmdRudder_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, propellerSpeed_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, leftAileron_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, leftFlap_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, rightAileron_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, rightFlap_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, elevators_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, rudder_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, cmdPropellerSpeed_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, cmdLeftAileron_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, cmdLeftFlap_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, cmdRightAileron_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, cmdRightFlap_);
      }
      if (((bitField0_ & 0x00001000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, cmdElevators_);
      }
      if (((bitField0_ & 0x00002000) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, cmdRudder_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gazebo.msgs.CessnaOuterClass.Cessna)) {
        return super.equals(obj);
      }
      gazebo.msgs.CessnaOuterClass.Cessna other = (gazebo.msgs.CessnaOuterClass.Cessna) obj;

      if (hasPropellerSpeed() != other.hasPropellerSpeed()) return false;
      if (hasPropellerSpeed()) {
        if (java.lang.Float.floatToIntBits(getPropellerSpeed())
            != java.lang.Float.floatToIntBits(
                other.getPropellerSpeed())) return false;
      }
      if (hasLeftAileron() != other.hasLeftAileron()) return false;
      if (hasLeftAileron()) {
        if (java.lang.Float.floatToIntBits(getLeftAileron())
            != java.lang.Float.floatToIntBits(
                other.getLeftAileron())) return false;
      }
      if (hasLeftFlap() != other.hasLeftFlap()) return false;
      if (hasLeftFlap()) {
        if (java.lang.Float.floatToIntBits(getLeftFlap())
            != java.lang.Float.floatToIntBits(
                other.getLeftFlap())) return false;
      }
      if (hasRightAileron() != other.hasRightAileron()) return false;
      if (hasRightAileron()) {
        if (java.lang.Float.floatToIntBits(getRightAileron())
            != java.lang.Float.floatToIntBits(
                other.getRightAileron())) return false;
      }
      if (hasRightFlap() != other.hasRightFlap()) return false;
      if (hasRightFlap()) {
        if (java.lang.Float.floatToIntBits(getRightFlap())
            != java.lang.Float.floatToIntBits(
                other.getRightFlap())) return false;
      }
      if (hasElevators() != other.hasElevators()) return false;
      if (hasElevators()) {
        if (java.lang.Float.floatToIntBits(getElevators())
            != java.lang.Float.floatToIntBits(
                other.getElevators())) return false;
      }
      if (hasRudder() != other.hasRudder()) return false;
      if (hasRudder()) {
        if (java.lang.Float.floatToIntBits(getRudder())
            != java.lang.Float.floatToIntBits(
                other.getRudder())) return false;
      }
      if (hasCmdPropellerSpeed() != other.hasCmdPropellerSpeed()) return false;
      if (hasCmdPropellerSpeed()) {
        if (java.lang.Float.floatToIntBits(getCmdPropellerSpeed())
            != java.lang.Float.floatToIntBits(
                other.getCmdPropellerSpeed())) return false;
      }
      if (hasCmdLeftAileron() != other.hasCmdLeftAileron()) return false;
      if (hasCmdLeftAileron()) {
        if (java.lang.Float.floatToIntBits(getCmdLeftAileron())
            != java.lang.Float.floatToIntBits(
                other.getCmdLeftAileron())) return false;
      }
      if (hasCmdLeftFlap() != other.hasCmdLeftFlap()) return false;
      if (hasCmdLeftFlap()) {
        if (java.lang.Float.floatToIntBits(getCmdLeftFlap())
            != java.lang.Float.floatToIntBits(
                other.getCmdLeftFlap())) return false;
      }
      if (hasCmdRightAileron() != other.hasCmdRightAileron()) return false;
      if (hasCmdRightAileron()) {
        if (java.lang.Float.floatToIntBits(getCmdRightAileron())
            != java.lang.Float.floatToIntBits(
                other.getCmdRightAileron())) return false;
      }
      if (hasCmdRightFlap() != other.hasCmdRightFlap()) return false;
      if (hasCmdRightFlap()) {
        if (java.lang.Float.floatToIntBits(getCmdRightFlap())
            != java.lang.Float.floatToIntBits(
                other.getCmdRightFlap())) return false;
      }
      if (hasCmdElevators() != other.hasCmdElevators()) return false;
      if (hasCmdElevators()) {
        if (java.lang.Float.floatToIntBits(getCmdElevators())
            != java.lang.Float.floatToIntBits(
                other.getCmdElevators())) return false;
      }
      if (hasCmdRudder() != other.hasCmdRudder()) return false;
      if (hasCmdRudder()) {
        if (java.lang.Float.floatToIntBits(getCmdRudder())
            != java.lang.Float.floatToIntBits(
                other.getCmdRudder())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPropellerSpeed()) {
        hash = (37 * hash) + PROPELLER_SPEED_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getPropellerSpeed());
      }
      if (hasLeftAileron()) {
        hash = (37 * hash) + LEFT_AILERON_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getLeftAileron());
      }
      if (hasLeftFlap()) {
        hash = (37 * hash) + LEFT_FLAP_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getLeftFlap());
      }
      if (hasRightAileron()) {
        hash = (37 * hash) + RIGHT_AILERON_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRightAileron());
      }
      if (hasRightFlap()) {
        hash = (37 * hash) + RIGHT_FLAP_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRightFlap());
      }
      if (hasElevators()) {
        hash = (37 * hash) + ELEVATORS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getElevators());
      }
      if (hasRudder()) {
        hash = (37 * hash) + RUDDER_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRudder());
      }
      if (hasCmdPropellerSpeed()) {
        hash = (37 * hash) + CMD_PROPELLER_SPEED_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getCmdPropellerSpeed());
      }
      if (hasCmdLeftAileron()) {
        hash = (37 * hash) + CMD_LEFT_AILERON_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getCmdLeftAileron());
      }
      if (hasCmdLeftFlap()) {
        hash = (37 * hash) + CMD_LEFT_FLAP_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getCmdLeftFlap());
      }
      if (hasCmdRightAileron()) {
        hash = (37 * hash) + CMD_RIGHT_AILERON_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getCmdRightAileron());
      }
      if (hasCmdRightFlap()) {
        hash = (37 * hash) + CMD_RIGHT_FLAP_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getCmdRightFlap());
      }
      if (hasCmdElevators()) {
        hash = (37 * hash) + CMD_ELEVATORS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getCmdElevators());
      }
      if (hasCmdRudder()) {
        hash = (37 * hash) + CMD_RUDDER_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getCmdRudder());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gazebo.msgs.CessnaOuterClass.Cessna parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gazebo.msgs.CessnaOuterClass.Cessna parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gazebo.msgs.CessnaOuterClass.Cessna prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.Cessna}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gazebo.msgs.Cessna)
        gazebo.msgs.CessnaOuterClass.CessnaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gazebo.msgs.CessnaOuterClass.internal_static_gazebo_msgs_Cessna_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gazebo.msgs.CessnaOuterClass.internal_static_gazebo_msgs_Cessna_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gazebo.msgs.CessnaOuterClass.Cessna.class, gazebo.msgs.CessnaOuterClass.Cessna.Builder.class);
      }

      // Construct using gazebo.msgs.CessnaOuterClass.Cessna.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        propellerSpeed_ = 0F;
        leftAileron_ = 0F;
        leftFlap_ = 0F;
        rightAileron_ = 0F;
        rightFlap_ = 0F;
        elevators_ = 0F;
        rudder_ = 0F;
        cmdPropellerSpeed_ = 0F;
        cmdLeftAileron_ = 0F;
        cmdLeftFlap_ = 0F;
        cmdRightAileron_ = 0F;
        cmdRightFlap_ = 0F;
        cmdElevators_ = 0F;
        cmdRudder_ = 0F;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gazebo.msgs.CessnaOuterClass.internal_static_gazebo_msgs_Cessna_descriptor;
      }

      @java.lang.Override
      public gazebo.msgs.CessnaOuterClass.Cessna getDefaultInstanceForType() {
        return gazebo.msgs.CessnaOuterClass.Cessna.getDefaultInstance();
      }

      @java.lang.Override
      public gazebo.msgs.CessnaOuterClass.Cessna build() {
        gazebo.msgs.CessnaOuterClass.Cessna result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public gazebo.msgs.CessnaOuterClass.Cessna buildPartial() {
        gazebo.msgs.CessnaOuterClass.Cessna result = new gazebo.msgs.CessnaOuterClass.Cessna(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(gazebo.msgs.CessnaOuterClass.Cessna result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.propellerSpeed_ = propellerSpeed_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.leftAileron_ = leftAileron_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.leftFlap_ = leftFlap_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.rightAileron_ = rightAileron_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.rightFlap_ = rightFlap_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.elevators_ = elevators_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.rudder_ = rudder_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.cmdPropellerSpeed_ = cmdPropellerSpeed_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.cmdLeftAileron_ = cmdLeftAileron_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.cmdLeftFlap_ = cmdLeftFlap_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.cmdRightAileron_ = cmdRightAileron_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.cmdRightFlap_ = cmdRightFlap_;
          to_bitField0_ |= 0x00000800;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.cmdElevators_ = cmdElevators_;
          to_bitField0_ |= 0x00001000;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.cmdRudder_ = cmdRudder_;
          to_bitField0_ |= 0x00002000;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gazebo.msgs.CessnaOuterClass.Cessna) {
          return mergeFrom((gazebo.msgs.CessnaOuterClass.Cessna)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gazebo.msgs.CessnaOuterClass.Cessna other) {
        if (other == gazebo.msgs.CessnaOuterClass.Cessna.getDefaultInstance()) return this;
        if (other.hasPropellerSpeed()) {
          setPropellerSpeed(other.getPropellerSpeed());
        }
        if (other.hasLeftAileron()) {
          setLeftAileron(other.getLeftAileron());
        }
        if (other.hasLeftFlap()) {
          setLeftFlap(other.getLeftFlap());
        }
        if (other.hasRightAileron()) {
          setRightAileron(other.getRightAileron());
        }
        if (other.hasRightFlap()) {
          setRightFlap(other.getRightFlap());
        }
        if (other.hasElevators()) {
          setElevators(other.getElevators());
        }
        if (other.hasRudder()) {
          setRudder(other.getRudder());
        }
        if (other.hasCmdPropellerSpeed()) {
          setCmdPropellerSpeed(other.getCmdPropellerSpeed());
        }
        if (other.hasCmdLeftAileron()) {
          setCmdLeftAileron(other.getCmdLeftAileron());
        }
        if (other.hasCmdLeftFlap()) {
          setCmdLeftFlap(other.getCmdLeftFlap());
        }
        if (other.hasCmdRightAileron()) {
          setCmdRightAileron(other.getCmdRightAileron());
        }
        if (other.hasCmdRightFlap()) {
          setCmdRightFlap(other.getCmdRightFlap());
        }
        if (other.hasCmdElevators()) {
          setCmdElevators(other.getCmdElevators());
        }
        if (other.hasCmdRudder()) {
          setCmdRudder(other.getCmdRudder());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 13: {
                propellerSpeed_ = input.readFloat();
                bitField0_ |= 0x00000001;
                break;
              } // case 13
              case 21: {
                leftAileron_ = input.readFloat();
                bitField0_ |= 0x00000002;
                break;
              } // case 21
              case 29: {
                leftFlap_ = input.readFloat();
                bitField0_ |= 0x00000004;
                break;
              } // case 29
              case 37: {
                rightAileron_ = input.readFloat();
                bitField0_ |= 0x00000008;
                break;
              } // case 37
              case 45: {
                rightFlap_ = input.readFloat();
                bitField0_ |= 0x00000010;
                break;
              } // case 45
              case 53: {
                elevators_ = input.readFloat();
                bitField0_ |= 0x00000020;
                break;
              } // case 53
              case 61: {
                rudder_ = input.readFloat();
                bitField0_ |= 0x00000040;
                break;
              } // case 61
              case 69: {
                cmdPropellerSpeed_ = input.readFloat();
                bitField0_ |= 0x00000080;
                break;
              } // case 69
              case 77: {
                cmdLeftAileron_ = input.readFloat();
                bitField0_ |= 0x00000100;
                break;
              } // case 77
              case 85: {
                cmdLeftFlap_ = input.readFloat();
                bitField0_ |= 0x00000200;
                break;
              } // case 85
              case 93: {
                cmdRightAileron_ = input.readFloat();
                bitField0_ |= 0x00000400;
                break;
              } // case 93
              case 101: {
                cmdRightFlap_ = input.readFloat();
                bitField0_ |= 0x00000800;
                break;
              } // case 101
              case 109: {
                cmdElevators_ = input.readFloat();
                bitField0_ |= 0x00001000;
                break;
              } // case 109
              case 117: {
                cmdRudder_ = input.readFloat();
                bitField0_ |= 0x00002000;
                break;
              } // case 117
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private float propellerSpeed_ ;
      /**
       * <pre>
       *&#47; &#92;brief Current RPM of the propeller.
       * </pre>
       *
       * <code>optional float propeller_speed = 1;</code>
       * @return Whether the propellerSpeed field is set.
       */
      @java.lang.Override
      public boolean hasPropellerSpeed() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Current RPM of the propeller.
       * </pre>
       *
       * <code>optional float propeller_speed = 1;</code>
       * @return The propellerSpeed.
       */
      @java.lang.Override
      public float getPropellerSpeed() {
        return propellerSpeed_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current RPM of the propeller.
       * </pre>
       *
       * <code>optional float propeller_speed = 1;</code>
       * @param value The propellerSpeed to set.
       * @return This builder for chaining.
       */
      public Builder setPropellerSpeed(float value) {
        
        propellerSpeed_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current RPM of the propeller.
       * </pre>
       *
       * <code>optional float propeller_speed = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPropellerSpeed() {
        bitField0_ = (bitField0_ & ~0x00000001);
        propellerSpeed_ = 0F;
        onChanged();
        return this;
      }

      private float leftAileron_ ;
      /**
       * <pre>
       *&#47; &#92;brief Current left aileron angle in rads.
       * </pre>
       *
       * <code>optional float left_aileron = 2;</code>
       * @return Whether the leftAileron field is set.
       */
      @java.lang.Override
      public boolean hasLeftAileron() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Current left aileron angle in rads.
       * </pre>
       *
       * <code>optional float left_aileron = 2;</code>
       * @return The leftAileron.
       */
      @java.lang.Override
      public float getLeftAileron() {
        return leftAileron_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current left aileron angle in rads.
       * </pre>
       *
       * <code>optional float left_aileron = 2;</code>
       * @param value The leftAileron to set.
       * @return This builder for chaining.
       */
      public Builder setLeftAileron(float value) {
        
        leftAileron_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current left aileron angle in rads.
       * </pre>
       *
       * <code>optional float left_aileron = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLeftAileron() {
        bitField0_ = (bitField0_ & ~0x00000002);
        leftAileron_ = 0F;
        onChanged();
        return this;
      }

      private float leftFlap_ ;
      /**
       * <pre>
       *&#47; &#92;brief Current left flap angle in rads.
       * </pre>
       *
       * <code>optional float left_flap = 3;</code>
       * @return Whether the leftFlap field is set.
       */
      @java.lang.Override
      public boolean hasLeftFlap() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Current left flap angle in rads.
       * </pre>
       *
       * <code>optional float left_flap = 3;</code>
       * @return The leftFlap.
       */
      @java.lang.Override
      public float getLeftFlap() {
        return leftFlap_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current left flap angle in rads.
       * </pre>
       *
       * <code>optional float left_flap = 3;</code>
       * @param value The leftFlap to set.
       * @return This builder for chaining.
       */
      public Builder setLeftFlap(float value) {
        
        leftFlap_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current left flap angle in rads.
       * </pre>
       *
       * <code>optional float left_flap = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLeftFlap() {
        bitField0_ = (bitField0_ & ~0x00000004);
        leftFlap_ = 0F;
        onChanged();
        return this;
      }

      private float rightAileron_ ;
      /**
       * <pre>
       *&#47; &#92;brief Current right aileron angle in rads.
       * </pre>
       *
       * <code>optional float right_aileron = 4;</code>
       * @return Whether the rightAileron field is set.
       */
      @java.lang.Override
      public boolean hasRightAileron() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Current right aileron angle in rads.
       * </pre>
       *
       * <code>optional float right_aileron = 4;</code>
       * @return The rightAileron.
       */
      @java.lang.Override
      public float getRightAileron() {
        return rightAileron_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current right aileron angle in rads.
       * </pre>
       *
       * <code>optional float right_aileron = 4;</code>
       * @param value The rightAileron to set.
       * @return This builder for chaining.
       */
      public Builder setRightAileron(float value) {
        
        rightAileron_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current right aileron angle in rads.
       * </pre>
       *
       * <code>optional float right_aileron = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearRightAileron() {
        bitField0_ = (bitField0_ & ~0x00000008);
        rightAileron_ = 0F;
        onChanged();
        return this;
      }

      private float rightFlap_ ;
      /**
       * <pre>
       *&#47; &#92;brief Current right flap angle in rads.
       * </pre>
       *
       * <code>optional float right_flap = 5;</code>
       * @return Whether the rightFlap field is set.
       */
      @java.lang.Override
      public boolean hasRightFlap() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Current right flap angle in rads.
       * </pre>
       *
       * <code>optional float right_flap = 5;</code>
       * @return The rightFlap.
       */
      @java.lang.Override
      public float getRightFlap() {
        return rightFlap_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current right flap angle in rads.
       * </pre>
       *
       * <code>optional float right_flap = 5;</code>
       * @param value The rightFlap to set.
       * @return This builder for chaining.
       */
      public Builder setRightFlap(float value) {
        
        rightFlap_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current right flap angle in rads.
       * </pre>
       *
       * <code>optional float right_flap = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearRightFlap() {
        bitField0_ = (bitField0_ & ~0x00000010);
        rightFlap_ = 0F;
        onChanged();
        return this;
      }

      private float elevators_ ;
      /**
       * <pre>
       *&#47; &#92;brief Current elevators angle in rads.
       * </pre>
       *
       * <code>optional float elevators = 6;</code>
       * @return Whether the elevators field is set.
       */
      @java.lang.Override
      public boolean hasElevators() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Current elevators angle in rads.
       * </pre>
       *
       * <code>optional float elevators = 6;</code>
       * @return The elevators.
       */
      @java.lang.Override
      public float getElevators() {
        return elevators_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current elevators angle in rads.
       * </pre>
       *
       * <code>optional float elevators = 6;</code>
       * @param value The elevators to set.
       * @return This builder for chaining.
       */
      public Builder setElevators(float value) {
        
        elevators_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current elevators angle in rads.
       * </pre>
       *
       * <code>optional float elevators = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearElevators() {
        bitField0_ = (bitField0_ & ~0x00000020);
        elevators_ = 0F;
        onChanged();
        return this;
      }

      private float rudder_ ;
      /**
       * <pre>
       *&#47; &#92;brief Current ruddle angle in rads.
       * </pre>
       *
       * <code>optional float rudder = 7;</code>
       * @return Whether the rudder field is set.
       */
      @java.lang.Override
      public boolean hasRudder() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Current ruddle angle in rads.
       * </pre>
       *
       * <code>optional float rudder = 7;</code>
       * @return The rudder.
       */
      @java.lang.Override
      public float getRudder() {
        return rudder_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current ruddle angle in rads.
       * </pre>
       *
       * <code>optional float rudder = 7;</code>
       * @param value The rudder to set.
       * @return This builder for chaining.
       */
      public Builder setRudder(float value) {
        
        rudder_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Current ruddle angle in rads.
       * </pre>
       *
       * <code>optional float rudder = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearRudder() {
        bitField0_ = (bitField0_ & ~0x00000040);
        rudder_ = 0F;
        onChanged();
        return this;
      }

      private float cmdPropellerSpeed_ ;
      /**
       * <pre>
       *&#47; &#92;brief Target RPM of the propeller.
       * </pre>
       *
       * <code>optional float cmd_propeller_speed = 8;</code>
       * @return Whether the cmdPropellerSpeed field is set.
       */
      @java.lang.Override
      public boolean hasCmdPropellerSpeed() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Target RPM of the propeller.
       * </pre>
       *
       * <code>optional float cmd_propeller_speed = 8;</code>
       * @return The cmdPropellerSpeed.
       */
      @java.lang.Override
      public float getCmdPropellerSpeed() {
        return cmdPropellerSpeed_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target RPM of the propeller.
       * </pre>
       *
       * <code>optional float cmd_propeller_speed = 8;</code>
       * @param value The cmdPropellerSpeed to set.
       * @return This builder for chaining.
       */
      public Builder setCmdPropellerSpeed(float value) {
        
        cmdPropellerSpeed_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target RPM of the propeller.
       * </pre>
       *
       * <code>optional float cmd_propeller_speed = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearCmdPropellerSpeed() {
        bitField0_ = (bitField0_ & ~0x00000080);
        cmdPropellerSpeed_ = 0F;
        onChanged();
        return this;
      }

      private float cmdLeftAileron_ ;
      /**
       * <pre>
       *&#47; &#92;brief Target left aileron angle in rads.
       * </pre>
       *
       * <code>optional float cmd_left_aileron = 9;</code>
       * @return Whether the cmdLeftAileron field is set.
       */
      @java.lang.Override
      public boolean hasCmdLeftAileron() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Target left aileron angle in rads.
       * </pre>
       *
       * <code>optional float cmd_left_aileron = 9;</code>
       * @return The cmdLeftAileron.
       */
      @java.lang.Override
      public float getCmdLeftAileron() {
        return cmdLeftAileron_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target left aileron angle in rads.
       * </pre>
       *
       * <code>optional float cmd_left_aileron = 9;</code>
       * @param value The cmdLeftAileron to set.
       * @return This builder for chaining.
       */
      public Builder setCmdLeftAileron(float value) {
        
        cmdLeftAileron_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target left aileron angle in rads.
       * </pre>
       *
       * <code>optional float cmd_left_aileron = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearCmdLeftAileron() {
        bitField0_ = (bitField0_ & ~0x00000100);
        cmdLeftAileron_ = 0F;
        onChanged();
        return this;
      }

      private float cmdLeftFlap_ ;
      /**
       * <pre>
       *&#47; &#92;brief Target left flap angle in rads.
       * </pre>
       *
       * <code>optional float cmd_left_flap = 10;</code>
       * @return Whether the cmdLeftFlap field is set.
       */
      @java.lang.Override
      public boolean hasCmdLeftFlap() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Target left flap angle in rads.
       * </pre>
       *
       * <code>optional float cmd_left_flap = 10;</code>
       * @return The cmdLeftFlap.
       */
      @java.lang.Override
      public float getCmdLeftFlap() {
        return cmdLeftFlap_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target left flap angle in rads.
       * </pre>
       *
       * <code>optional float cmd_left_flap = 10;</code>
       * @param value The cmdLeftFlap to set.
       * @return This builder for chaining.
       */
      public Builder setCmdLeftFlap(float value) {
        
        cmdLeftFlap_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target left flap angle in rads.
       * </pre>
       *
       * <code>optional float cmd_left_flap = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearCmdLeftFlap() {
        bitField0_ = (bitField0_ & ~0x00000200);
        cmdLeftFlap_ = 0F;
        onChanged();
        return this;
      }

      private float cmdRightAileron_ ;
      /**
       * <pre>
       *&#47; &#92;brief Target right aileron angle in rads.
       * </pre>
       *
       * <code>optional float cmd_right_aileron = 11;</code>
       * @return Whether the cmdRightAileron field is set.
       */
      @java.lang.Override
      public boolean hasCmdRightAileron() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Target right aileron angle in rads.
       * </pre>
       *
       * <code>optional float cmd_right_aileron = 11;</code>
       * @return The cmdRightAileron.
       */
      @java.lang.Override
      public float getCmdRightAileron() {
        return cmdRightAileron_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target right aileron angle in rads.
       * </pre>
       *
       * <code>optional float cmd_right_aileron = 11;</code>
       * @param value The cmdRightAileron to set.
       * @return This builder for chaining.
       */
      public Builder setCmdRightAileron(float value) {
        
        cmdRightAileron_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target right aileron angle in rads.
       * </pre>
       *
       * <code>optional float cmd_right_aileron = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearCmdRightAileron() {
        bitField0_ = (bitField0_ & ~0x00000400);
        cmdRightAileron_ = 0F;
        onChanged();
        return this;
      }

      private float cmdRightFlap_ ;
      /**
       * <pre>
       *&#47; &#92;brief Target right flap angle in rads.
       * </pre>
       *
       * <code>optional float cmd_right_flap = 12;</code>
       * @return Whether the cmdRightFlap field is set.
       */
      @java.lang.Override
      public boolean hasCmdRightFlap() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Target right flap angle in rads.
       * </pre>
       *
       * <code>optional float cmd_right_flap = 12;</code>
       * @return The cmdRightFlap.
       */
      @java.lang.Override
      public float getCmdRightFlap() {
        return cmdRightFlap_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target right flap angle in rads.
       * </pre>
       *
       * <code>optional float cmd_right_flap = 12;</code>
       * @param value The cmdRightFlap to set.
       * @return This builder for chaining.
       */
      public Builder setCmdRightFlap(float value) {
        
        cmdRightFlap_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target right flap angle in rads.
       * </pre>
       *
       * <code>optional float cmd_right_flap = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearCmdRightFlap() {
        bitField0_ = (bitField0_ & ~0x00000800);
        cmdRightFlap_ = 0F;
        onChanged();
        return this;
      }

      private float cmdElevators_ ;
      /**
       * <pre>
       *&#47; &#92;brief Target elevators angle in rads.
       * </pre>
       *
       * <code>optional float cmd_elevators = 13;</code>
       * @return Whether the cmdElevators field is set.
       */
      @java.lang.Override
      public boolean hasCmdElevators() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Target elevators angle in rads.
       * </pre>
       *
       * <code>optional float cmd_elevators = 13;</code>
       * @return The cmdElevators.
       */
      @java.lang.Override
      public float getCmdElevators() {
        return cmdElevators_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target elevators angle in rads.
       * </pre>
       *
       * <code>optional float cmd_elevators = 13;</code>
       * @param value The cmdElevators to set.
       * @return This builder for chaining.
       */
      public Builder setCmdElevators(float value) {
        
        cmdElevators_ = value;
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target elevators angle in rads.
       * </pre>
       *
       * <code>optional float cmd_elevators = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearCmdElevators() {
        bitField0_ = (bitField0_ & ~0x00001000);
        cmdElevators_ = 0F;
        onChanged();
        return this;
      }

      private float cmdRudder_ ;
      /**
       * <pre>
       *&#47; &#92;brief Target ruddle angle in rads.
       * </pre>
       *
       * <code>optional float cmd_rudder = 14;</code>
       * @return Whether the cmdRudder field is set.
       */
      @java.lang.Override
      public boolean hasCmdRudder() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Target ruddle angle in rads.
       * </pre>
       *
       * <code>optional float cmd_rudder = 14;</code>
       * @return The cmdRudder.
       */
      @java.lang.Override
      public float getCmdRudder() {
        return cmdRudder_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target ruddle angle in rads.
       * </pre>
       *
       * <code>optional float cmd_rudder = 14;</code>
       * @param value The cmdRudder to set.
       * @return This builder for chaining.
       */
      public Builder setCmdRudder(float value) {
        
        cmdRudder_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Target ruddle angle in rads.
       * </pre>
       *
       * <code>optional float cmd_rudder = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearCmdRudder() {
        bitField0_ = (bitField0_ & ~0x00002000);
        cmdRudder_ = 0F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:gazebo.msgs.Cessna)
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.Cessna)
    private static final gazebo.msgs.CessnaOuterClass.Cessna DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gazebo.msgs.CessnaOuterClass.Cessna();
    }

    public static gazebo.msgs.CessnaOuterClass.Cessna getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Cessna>
        PARSER = new com.google.protobuf.AbstractParser<Cessna>() {
      @java.lang.Override
      public Cessna parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Cessna> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Cessna> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public gazebo.msgs.CessnaOuterClass.Cessna getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_Cessna_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gazebo_msgs_Cessna_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014cessna.proto\022\013gazebo.msgs\"\304\002\n\006Cessna\022\027" +
      "\n\017propeller_speed\030\001 \001(\002\022\024\n\014left_aileron\030" +
      "\002 \001(\002\022\021\n\tleft_flap\030\003 \001(\002\022\025\n\rright_ailero" +
      "n\030\004 \001(\002\022\022\n\nright_flap\030\005 \001(\002\022\021\n\televators" +
      "\030\006 \001(\002\022\016\n\006rudder\030\007 \001(\002\022\033\n\023cmd_propeller_" +
      "speed\030\010 \001(\002\022\030\n\020cmd_left_aileron\030\t \001(\002\022\025\n" +
      "\rcmd_left_flap\030\n \001(\002\022\031\n\021cmd_right_ailero" +
      "n\030\013 \001(\002\022\026\n\016cmd_right_flap\030\014 \001(\002\022\025\n\rcmd_e" +
      "levators\030\r \001(\002\022\022\n\ncmd_rudder\030\016 \001(\002"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_gazebo_msgs_Cessna_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gazebo_msgs_Cessna_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gazebo_msgs_Cessna_descriptor,
        new java.lang.String[] { "PropellerSpeed", "LeftAileron", "LeftFlap", "RightAileron", "RightFlap", "Elevators", "Rudder", "CmdPropellerSpeed", "CmdLeftAileron", "CmdLeftFlap", "CmdRightAileron", "CmdRightFlap", "CmdElevators", "CmdRudder", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
