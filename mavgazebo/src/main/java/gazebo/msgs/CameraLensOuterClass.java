// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_lens.proto

package gazebo.msgs;

public final class CameraLensOuterClass {
  private CameraLensOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CameraLensOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gazebo.msgs.CameraLens)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     *
     * <code>required string type = 1;</code>
     * @return Whether the type field is set.
     */
    boolean hasType();
    /**
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     *
     * <code>required string type = 1;</code>
     * @return The type.
     */
    java.lang.String getType();
    /**
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     *
     * <code>required string type = 1;</code>
     * @return The bytes for type.
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <pre>
     *&#47; &#92;brief Linear image scaling factor
     * </pre>
     *
     * <code>optional double c1 = 2;</code>
     * @return Whether the c1 field is set.
     */
    boolean hasC1();
    /**
     * <pre>
     *&#47; &#92;brief Linear image scaling factor
     * </pre>
     *
     * <code>optional double c1 = 2;</code>
     * @return The c1.
     */
    double getC1();

    /**
     * <pre>
     *&#47; &#92;brief Angle scaling factor
     * </pre>
     *
     * <code>optional double c2 = 3;</code>
     * @return Whether the c2 field is set.
     */
    boolean hasC2();
    /**
     * <pre>
     *&#47; &#92;brief Angle scaling factor
     * </pre>
     *
     * <code>optional double c2 = 3;</code>
     * @return The c2.
     */
    double getC2();

    /**
     * <pre>
     *&#47; &#92;brief Angle offset factor
     * </pre>
     *
     * <code>optional double c3 = 4;</code>
     * @return Whether the c3 field is set.
     */
    boolean hasC3();
    /**
     * <pre>
     *&#47; &#92;brief Angle offset factor
     * </pre>
     *
     * <code>optional double c3 = 4;</code>
     * @return The c3.
     */
    double getC3();

    /**
     * <pre>
     *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
     * /        if scale_to_fov is set to `true`.
     * </pre>
     *
     * <code>optional double f = 5;</code>
     * @return Whether the f field is set.
     */
    boolean hasF();
    /**
     * <pre>
     *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
     * /        if scale_to_fov is set to `true`.
     * </pre>
     *
     * <code>optional double f = 5;</code>
     * @return The f.
     */
    double getF();

    /**
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     *
     * <code>optional string fun = 6;</code>
     * @return Whether the fun field is set.
     */
    boolean hasFun();
    /**
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     *
     * <code>optional string fun = 6;</code>
     * @return The fun.
     */
    java.lang.String getFun();
    /**
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     *
     * <code>optional string fun = 6;</code>
     * @return The bytes for fun.
     */
    com.google.protobuf.ByteString
        getFunBytes();

    /**
     * <pre>
     *&#47; &#92;brief Scale image to fit horizontal FOV
     * </pre>
     *
     * <code>optional bool scale_to_hfov = 7;</code>
     * @return Whether the scaleToHfov field is set.
     */
    boolean hasScaleToHfov();
    /**
     * <pre>
     *&#47; &#92;brief Scale image to fit horizontal FOV
     * </pre>
     *
     * <code>optional bool scale_to_hfov = 7;</code>
     * @return The scaleToHfov.
     */
    boolean getScaleToHfov();

    /**
     * <pre>
     *&#47; &#92;brief Everything outside of this angle will be hidden,
     * /        the angle is counted from camera's X (forward) axis.
     * </pre>
     *
     * <code>optional double cutoff_angle = 8;</code>
     * @return Whether the cutoffAngle field is set.
     */
    boolean hasCutoffAngle();
    /**
     * <pre>
     *&#47; &#92;brief Everything outside of this angle will be hidden,
     * /        the angle is counted from camera's X (forward) axis.
     * </pre>
     *
     * <code>optional double cutoff_angle = 8;</code>
     * @return The cutoffAngle.
     */
    double getCutoffAngle();

    /**
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     *
     * <code>optional double hfov = 9;</code>
     * @return Whether the hfov field is set.
     */
    boolean hasHfov();
    /**
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     *
     * <code>optional double hfov = 9;</code>
     * @return The hfov.
     */
    double getHfov();

    /**
     * <pre>
     *&#47; &#92;brief Size of cube map texture,
     * /        used to store intermediate rendering result.
     * </pre>
     *
     * <code>optional int32 env_texture_size = 10;</code>
     * @return Whether the envTextureSize field is set.
     */
    boolean hasEnvTextureSize();
    /**
     * <pre>
     *&#47; &#92;brief Size of cube map texture,
     * /        used to store intermediate rendering result.
     * </pre>
     *
     * <code>optional int32 env_texture_size = 10;</code>
     * @return The envTextureSize.
     */
    int getEnvTextureSize();
  }
  /**
   * Protobuf type {@code gazebo.msgs.CameraLens}
   */
  public static final class CameraLens extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gazebo.msgs.CameraLens)
      CameraLensOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CameraLens.newBuilder() to construct.
    private CameraLens(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CameraLens() {
      type_ = "";
      fun_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CameraLens();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gazebo.msgs.CameraLensOuterClass.internal_static_gazebo_msgs_CameraLens_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gazebo.msgs.CameraLensOuterClass.internal_static_gazebo_msgs_CameraLens_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gazebo.msgs.CameraLensOuterClass.CameraLens.class, gazebo.msgs.CameraLensOuterClass.CameraLens.Builder.class);
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object type_ = "";
    /**
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     *
     * <code>required string type = 1;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     *
     * <code>required string type = 1;</code>
     * @return The type.
     */
    @java.lang.Override
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     *
     * <code>required string type = 1;</code>
     * @return The bytes for type.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int C1_FIELD_NUMBER = 2;
    private double c1_ = 0D;
    /**
     * <pre>
     *&#47; &#92;brief Linear image scaling factor
     * </pre>
     *
     * <code>optional double c1 = 2;</code>
     * @return Whether the c1 field is set.
     */
    @java.lang.Override
    public boolean hasC1() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Linear image scaling factor
     * </pre>
     *
     * <code>optional double c1 = 2;</code>
     * @return The c1.
     */
    @java.lang.Override
    public double getC1() {
      return c1_;
    }

    public static final int C2_FIELD_NUMBER = 3;
    private double c2_ = 0D;
    /**
     * <pre>
     *&#47; &#92;brief Angle scaling factor
     * </pre>
     *
     * <code>optional double c2 = 3;</code>
     * @return Whether the c2 field is set.
     */
    @java.lang.Override
    public boolean hasC2() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Angle scaling factor
     * </pre>
     *
     * <code>optional double c2 = 3;</code>
     * @return The c2.
     */
    @java.lang.Override
    public double getC2() {
      return c2_;
    }

    public static final int C3_FIELD_NUMBER = 4;
    private double c3_ = 0D;
    /**
     * <pre>
     *&#47; &#92;brief Angle offset factor
     * </pre>
     *
     * <code>optional double c3 = 4;</code>
     * @return Whether the c3 field is set.
     */
    @java.lang.Override
    public boolean hasC3() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Angle offset factor
     * </pre>
     *
     * <code>optional double c3 = 4;</code>
     * @return The c3.
     */
    @java.lang.Override
    public double getC3() {
      return c3_;
    }

    public static final int F_FIELD_NUMBER = 5;
    private double f_ = 0D;
    /**
     * <pre>
     *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
     * /        if scale_to_fov is set to `true`.
     * </pre>
     *
     * <code>optional double f = 5;</code>
     * @return Whether the f field is set.
     */
    @java.lang.Override
    public boolean hasF() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
     * /        if scale_to_fov is set to `true`.
     * </pre>
     *
     * <code>optional double f = 5;</code>
     * @return The f.
     */
    @java.lang.Override
    public double getF() {
      return f_;
    }

    public static final int FUN_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private volatile java.lang.Object fun_ = "";
    /**
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     *
     * <code>optional string fun = 6;</code>
     * @return Whether the fun field is set.
     */
    @java.lang.Override
    public boolean hasFun() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     *
     * <code>optional string fun = 6;</code>
     * @return The fun.
     */
    @java.lang.Override
    public java.lang.String getFun() {
      java.lang.Object ref = fun_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fun_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     *
     * <code>optional string fun = 6;</code>
     * @return The bytes for fun.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFunBytes() {
      java.lang.Object ref = fun_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fun_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCALE_TO_HFOV_FIELD_NUMBER = 7;
    private boolean scaleToHfov_ = false;
    /**
     * <pre>
     *&#47; &#92;brief Scale image to fit horizontal FOV
     * </pre>
     *
     * <code>optional bool scale_to_hfov = 7;</code>
     * @return Whether the scaleToHfov field is set.
     */
    @java.lang.Override
    public boolean hasScaleToHfov() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Scale image to fit horizontal FOV
     * </pre>
     *
     * <code>optional bool scale_to_hfov = 7;</code>
     * @return The scaleToHfov.
     */
    @java.lang.Override
    public boolean getScaleToHfov() {
      return scaleToHfov_;
    }

    public static final int CUTOFF_ANGLE_FIELD_NUMBER = 8;
    private double cutoffAngle_ = 0D;
    /**
     * <pre>
     *&#47; &#92;brief Everything outside of this angle will be hidden,
     * /        the angle is counted from camera's X (forward) axis.
     * </pre>
     *
     * <code>optional double cutoff_angle = 8;</code>
     * @return Whether the cutoffAngle field is set.
     */
    @java.lang.Override
    public boolean hasCutoffAngle() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Everything outside of this angle will be hidden,
     * /        the angle is counted from camera's X (forward) axis.
     * </pre>
     *
     * <code>optional double cutoff_angle = 8;</code>
     * @return The cutoffAngle.
     */
    @java.lang.Override
    public double getCutoffAngle() {
      return cutoffAngle_;
    }

    public static final int HFOV_FIELD_NUMBER = 9;
    private double hfov_ = 0D;
    /**
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     *
     * <code>optional double hfov = 9;</code>
     * @return Whether the hfov field is set.
     */
    @java.lang.Override
    public boolean hasHfov() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     *
     * <code>optional double hfov = 9;</code>
     * @return The hfov.
     */
    @java.lang.Override
    public double getHfov() {
      return hfov_;
    }

    public static final int ENV_TEXTURE_SIZE_FIELD_NUMBER = 10;
    private int envTextureSize_ = 0;
    /**
     * <pre>
     *&#47; &#92;brief Size of cube map texture,
     * /        used to store intermediate rendering result.
     * </pre>
     *
     * <code>optional int32 env_texture_size = 10;</code>
     * @return Whether the envTextureSize field is set.
     */
    @java.lang.Override
    public boolean hasEnvTextureSize() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     *&#47; &#92;brief Size of cube map texture,
     * /        used to store intermediate rendering result.
     * </pre>
     *
     * <code>optional int32 env_texture_size = 10;</code>
     * @return The envTextureSize.
     */
    @java.lang.Override
    public int getEnvTextureSize() {
      return envTextureSize_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, type_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeDouble(2, c1_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeDouble(3, c2_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeDouble(4, c3_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeDouble(5, f_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, fun_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeBool(7, scaleToHfov_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeDouble(8, cutoffAngle_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeDouble(9, hfov_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeInt32(10, envTextureSize_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, type_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, c1_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, c2_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, c3_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, f_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, fun_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, scaleToHfov_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, cutoffAngle_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, hfov_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, envTextureSize_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gazebo.msgs.CameraLensOuterClass.CameraLens)) {
        return super.equals(obj);
      }
      gazebo.msgs.CameraLensOuterClass.CameraLens other = (gazebo.msgs.CameraLensOuterClass.CameraLens) obj;

      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (!getType()
            .equals(other.getType())) return false;
      }
      if (hasC1() != other.hasC1()) return false;
      if (hasC1()) {
        if (java.lang.Double.doubleToLongBits(getC1())
            != java.lang.Double.doubleToLongBits(
                other.getC1())) return false;
      }
      if (hasC2() != other.hasC2()) return false;
      if (hasC2()) {
        if (java.lang.Double.doubleToLongBits(getC2())
            != java.lang.Double.doubleToLongBits(
                other.getC2())) return false;
      }
      if (hasC3() != other.hasC3()) return false;
      if (hasC3()) {
        if (java.lang.Double.doubleToLongBits(getC3())
            != java.lang.Double.doubleToLongBits(
                other.getC3())) return false;
      }
      if (hasF() != other.hasF()) return false;
      if (hasF()) {
        if (java.lang.Double.doubleToLongBits(getF())
            != java.lang.Double.doubleToLongBits(
                other.getF())) return false;
      }
      if (hasFun() != other.hasFun()) return false;
      if (hasFun()) {
        if (!getFun()
            .equals(other.getFun())) return false;
      }
      if (hasScaleToHfov() != other.hasScaleToHfov()) return false;
      if (hasScaleToHfov()) {
        if (getScaleToHfov()
            != other.getScaleToHfov()) return false;
      }
      if (hasCutoffAngle() != other.hasCutoffAngle()) return false;
      if (hasCutoffAngle()) {
        if (java.lang.Double.doubleToLongBits(getCutoffAngle())
            != java.lang.Double.doubleToLongBits(
                other.getCutoffAngle())) return false;
      }
      if (hasHfov() != other.hasHfov()) return false;
      if (hasHfov()) {
        if (java.lang.Double.doubleToLongBits(getHfov())
            != java.lang.Double.doubleToLongBits(
                other.getHfov())) return false;
      }
      if (hasEnvTextureSize() != other.hasEnvTextureSize()) return false;
      if (hasEnvTextureSize()) {
        if (getEnvTextureSize()
            != other.getEnvTextureSize()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getType().hashCode();
      }
      if (hasC1()) {
        hash = (37 * hash) + C1_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getC1()));
      }
      if (hasC2()) {
        hash = (37 * hash) + C2_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getC2()));
      }
      if (hasC3()) {
        hash = (37 * hash) + C3_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getC3()));
      }
      if (hasF()) {
        hash = (37 * hash) + F_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getF()));
      }
      if (hasFun()) {
        hash = (37 * hash) + FUN_FIELD_NUMBER;
        hash = (53 * hash) + getFun().hashCode();
      }
      if (hasScaleToHfov()) {
        hash = (37 * hash) + SCALE_TO_HFOV_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getScaleToHfov());
      }
      if (hasCutoffAngle()) {
        hash = (37 * hash) + CUTOFF_ANGLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getCutoffAngle()));
      }
      if (hasHfov()) {
        hash = (37 * hash) + HFOV_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getHfov()));
      }
      if (hasEnvTextureSize()) {
        hash = (37 * hash) + ENV_TEXTURE_SIZE_FIELD_NUMBER;
        hash = (53 * hash) + getEnvTextureSize();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gazebo.msgs.CameraLensOuterClass.CameraLens parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gazebo.msgs.CameraLensOuterClass.CameraLens prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.CameraLens}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gazebo.msgs.CameraLens)
        gazebo.msgs.CameraLensOuterClass.CameraLensOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gazebo.msgs.CameraLensOuterClass.internal_static_gazebo_msgs_CameraLens_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gazebo.msgs.CameraLensOuterClass.internal_static_gazebo_msgs_CameraLens_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gazebo.msgs.CameraLensOuterClass.CameraLens.class, gazebo.msgs.CameraLensOuterClass.CameraLens.Builder.class);
      }

      // Construct using gazebo.msgs.CameraLensOuterClass.CameraLens.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = "";
        c1_ = 0D;
        c2_ = 0D;
        c3_ = 0D;
        f_ = 0D;
        fun_ = "";
        scaleToHfov_ = false;
        cutoffAngle_ = 0D;
        hfov_ = 0D;
        envTextureSize_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gazebo.msgs.CameraLensOuterClass.internal_static_gazebo_msgs_CameraLens_descriptor;
      }

      @java.lang.Override
      public gazebo.msgs.CameraLensOuterClass.CameraLens getDefaultInstanceForType() {
        return gazebo.msgs.CameraLensOuterClass.CameraLens.getDefaultInstance();
      }

      @java.lang.Override
      public gazebo.msgs.CameraLensOuterClass.CameraLens build() {
        gazebo.msgs.CameraLensOuterClass.CameraLens result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public gazebo.msgs.CameraLensOuterClass.CameraLens buildPartial() {
        gazebo.msgs.CameraLensOuterClass.CameraLens result = new gazebo.msgs.CameraLensOuterClass.CameraLens(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(gazebo.msgs.CameraLensOuterClass.CameraLens result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.c1_ = c1_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.c2_ = c2_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.c3_ = c3_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.f_ = f_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.fun_ = fun_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.scaleToHfov_ = scaleToHfov_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.cutoffAngle_ = cutoffAngle_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.hfov_ = hfov_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.envTextureSize_ = envTextureSize_;
          to_bitField0_ |= 0x00000200;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gazebo.msgs.CameraLensOuterClass.CameraLens) {
          return mergeFrom((gazebo.msgs.CameraLensOuterClass.CameraLens)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gazebo.msgs.CameraLensOuterClass.CameraLens other) {
        if (other == gazebo.msgs.CameraLensOuterClass.CameraLens.getDefaultInstance()) return this;
        if (other.hasType()) {
          type_ = other.type_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasC1()) {
          setC1(other.getC1());
        }
        if (other.hasC2()) {
          setC2(other.getC2());
        }
        if (other.hasC3()) {
          setC3(other.getC3());
        }
        if (other.hasF()) {
          setF(other.getF());
        }
        if (other.hasFun()) {
          fun_ = other.fun_;
          bitField0_ |= 0x00000020;
          onChanged();
        }
        if (other.hasScaleToHfov()) {
          setScaleToHfov(other.getScaleToHfov());
        }
        if (other.hasCutoffAngle()) {
          setCutoffAngle(other.getCutoffAngle());
        }
        if (other.hasHfov()) {
          setHfov(other.getHfov());
        }
        if (other.hasEnvTextureSize()) {
          setEnvTextureSize(other.getEnvTextureSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasType()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                type_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 17: {
                c1_ = input.readDouble();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 25: {
                c2_ = input.readDouble();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 33: {
                c3_ = input.readDouble();
                bitField0_ |= 0x00000008;
                break;
              } // case 33
              case 41: {
                f_ = input.readDouble();
                bitField0_ |= 0x00000010;
                break;
              } // case 41
              case 50: {
                fun_ = input.readBytes();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 56: {
                scaleToHfov_ = input.readBool();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 65: {
                cutoffAngle_ = input.readDouble();
                bitField0_ |= 0x00000080;
                break;
              } // case 65
              case 73: {
                hfov_ = input.readDouble();
                bitField0_ |= 0x00000100;
                break;
              } // case 73
              case 80: {
                envTextureSize_ = input.readInt32();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object type_ = "";
      /**
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       *
       * <code>required string type = 1;</code>
       * @return Whether the type field is set.
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       *
       * <code>required string type = 1;</code>
       * @return The type.
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            type_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       *
       * <code>required string type = 1;</code>
       * @return The bytes for type.
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       *
       * <code>required string type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       *
       * <code>required string type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        type_ = getDefaultInstance().getType();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       *
       * <code>required string type = 1;</code>
       * @param value The bytes for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private double c1_ ;
      /**
       * <pre>
       *&#47; &#92;brief Linear image scaling factor
       * </pre>
       *
       * <code>optional double c1 = 2;</code>
       * @return Whether the c1 field is set.
       */
      @java.lang.Override
      public boolean hasC1() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Linear image scaling factor
       * </pre>
       *
       * <code>optional double c1 = 2;</code>
       * @return The c1.
       */
      @java.lang.Override
      public double getC1() {
        return c1_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Linear image scaling factor
       * </pre>
       *
       * <code>optional double c1 = 2;</code>
       * @param value The c1 to set.
       * @return This builder for chaining.
       */
      public Builder setC1(double value) {
        
        c1_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Linear image scaling factor
       * </pre>
       *
       * <code>optional double c1 = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearC1() {
        bitField0_ = (bitField0_ & ~0x00000002);
        c1_ = 0D;
        onChanged();
        return this;
      }

      private double c2_ ;
      /**
       * <pre>
       *&#47; &#92;brief Angle scaling factor
       * </pre>
       *
       * <code>optional double c2 = 3;</code>
       * @return Whether the c2 field is set.
       */
      @java.lang.Override
      public boolean hasC2() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle scaling factor
       * </pre>
       *
       * <code>optional double c2 = 3;</code>
       * @return The c2.
       */
      @java.lang.Override
      public double getC2() {
        return c2_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle scaling factor
       * </pre>
       *
       * <code>optional double c2 = 3;</code>
       * @param value The c2 to set.
       * @return This builder for chaining.
       */
      public Builder setC2(double value) {
        
        c2_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle scaling factor
       * </pre>
       *
       * <code>optional double c2 = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearC2() {
        bitField0_ = (bitField0_ & ~0x00000004);
        c2_ = 0D;
        onChanged();
        return this;
      }

      private double c3_ ;
      /**
       * <pre>
       *&#47; &#92;brief Angle offset factor
       * </pre>
       *
       * <code>optional double c3 = 4;</code>
       * @return Whether the c3 field is set.
       */
      @java.lang.Override
      public boolean hasC3() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle offset factor
       * </pre>
       *
       * <code>optional double c3 = 4;</code>
       * @return The c3.
       */
      @java.lang.Override
      public double getC3() {
        return c3_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle offset factor
       * </pre>
       *
       * <code>optional double c3 = 4;</code>
       * @param value The c3 to set.
       * @return This builder for chaining.
       */
      public Builder setC3(double value) {
        
        c3_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle offset factor
       * </pre>
       *
       * <code>optional double c3 = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearC3() {
        bitField0_ = (bitField0_ & ~0x00000008);
        c3_ = 0D;
        onChanged();
        return this;
      }

      private double f_ ;
      /**
       * <pre>
       *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
       * /        if scale_to_fov is set to `true`.
       * </pre>
       *
       * <code>optional double f = 5;</code>
       * @return Whether the f field is set.
       */
      @java.lang.Override
      public boolean hasF() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
       * /        if scale_to_fov is set to `true`.
       * </pre>
       *
       * <code>optional double f = 5;</code>
       * @return The f.
       */
      @java.lang.Override
      public double getF() {
        return f_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
       * /        if scale_to_fov is set to `true`.
       * </pre>
       *
       * <code>optional double f = 5;</code>
       * @param value The f to set.
       * @return This builder for chaining.
       */
      public Builder setF(double value) {
        
        f_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
       * /        if scale_to_fov is set to `true`.
       * </pre>
       *
       * <code>optional double f = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearF() {
        bitField0_ = (bitField0_ & ~0x00000010);
        f_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object fun_ = "";
      /**
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       *
       * <code>optional string fun = 6;</code>
       * @return Whether the fun field is set.
       */
      public boolean hasFun() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       *
       * <code>optional string fun = 6;</code>
       * @return The fun.
       */
      public java.lang.String getFun() {
        java.lang.Object ref = fun_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fun_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       *
       * <code>optional string fun = 6;</code>
       * @return The bytes for fun.
       */
      public com.google.protobuf.ByteString
          getFunBytes() {
        java.lang.Object ref = fun_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fun_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       *
       * <code>optional string fun = 6;</code>
       * @param value The fun to set.
       * @return This builder for chaining.
       */
      public Builder setFun(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        fun_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       *
       * <code>optional string fun = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearFun() {
        fun_ = getDefaultInstance().getFun();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       *
       * <code>optional string fun = 6;</code>
       * @param value The bytes for fun to set.
       * @return This builder for chaining.
       */
      public Builder setFunBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        fun_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      private boolean scaleToHfov_ ;
      /**
       * <pre>
       *&#47; &#92;brief Scale image to fit horizontal FOV
       * </pre>
       *
       * <code>optional bool scale_to_hfov = 7;</code>
       * @return Whether the scaleToHfov field is set.
       */
      @java.lang.Override
      public boolean hasScaleToHfov() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Scale image to fit horizontal FOV
       * </pre>
       *
       * <code>optional bool scale_to_hfov = 7;</code>
       * @return The scaleToHfov.
       */
      @java.lang.Override
      public boolean getScaleToHfov() {
        return scaleToHfov_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Scale image to fit horizontal FOV
       * </pre>
       *
       * <code>optional bool scale_to_hfov = 7;</code>
       * @param value The scaleToHfov to set.
       * @return This builder for chaining.
       */
      public Builder setScaleToHfov(boolean value) {
        
        scaleToHfov_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Scale image to fit horizontal FOV
       * </pre>
       *
       * <code>optional bool scale_to_hfov = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearScaleToHfov() {
        bitField0_ = (bitField0_ & ~0x00000040);
        scaleToHfov_ = false;
        onChanged();
        return this;
      }

      private double cutoffAngle_ ;
      /**
       * <pre>
       *&#47; &#92;brief Everything outside of this angle will be hidden,
       * /        the angle is counted from camera's X (forward) axis.
       * </pre>
       *
       * <code>optional double cutoff_angle = 8;</code>
       * @return Whether the cutoffAngle field is set.
       */
      @java.lang.Override
      public boolean hasCutoffAngle() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Everything outside of this angle will be hidden,
       * /        the angle is counted from camera's X (forward) axis.
       * </pre>
       *
       * <code>optional double cutoff_angle = 8;</code>
       * @return The cutoffAngle.
       */
      @java.lang.Override
      public double getCutoffAngle() {
        return cutoffAngle_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Everything outside of this angle will be hidden,
       * /        the angle is counted from camera's X (forward) axis.
       * </pre>
       *
       * <code>optional double cutoff_angle = 8;</code>
       * @param value The cutoffAngle to set.
       * @return This builder for chaining.
       */
      public Builder setCutoffAngle(double value) {
        
        cutoffAngle_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Everything outside of this angle will be hidden,
       * /        the angle is counted from camera's X (forward) axis.
       * </pre>
       *
       * <code>optional double cutoff_angle = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearCutoffAngle() {
        bitField0_ = (bitField0_ & ~0x00000080);
        cutoffAngle_ = 0D;
        onChanged();
        return this;
      }

      private double hfov_ ;
      /**
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       *
       * <code>optional double hfov = 9;</code>
       * @return Whether the hfov field is set.
       */
      @java.lang.Override
      public boolean hasHfov() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       *
       * <code>optional double hfov = 9;</code>
       * @return The hfov.
       */
      @java.lang.Override
      public double getHfov() {
        return hfov_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       *
       * <code>optional double hfov = 9;</code>
       * @param value The hfov to set.
       * @return This builder for chaining.
       */
      public Builder setHfov(double value) {
        
        hfov_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       *
       * <code>optional double hfov = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearHfov() {
        bitField0_ = (bitField0_ & ~0x00000100);
        hfov_ = 0D;
        onChanged();
        return this;
      }

      private int envTextureSize_ ;
      /**
       * <pre>
       *&#47; &#92;brief Size of cube map texture,
       * /        used to store intermediate rendering result.
       * </pre>
       *
       * <code>optional int32 env_texture_size = 10;</code>
       * @return Whether the envTextureSize field is set.
       */
      @java.lang.Override
      public boolean hasEnvTextureSize() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       *&#47; &#92;brief Size of cube map texture,
       * /        used to store intermediate rendering result.
       * </pre>
       *
       * <code>optional int32 env_texture_size = 10;</code>
       * @return The envTextureSize.
       */
      @java.lang.Override
      public int getEnvTextureSize() {
        return envTextureSize_;
      }
      /**
       * <pre>
       *&#47; &#92;brief Size of cube map texture,
       * /        used to store intermediate rendering result.
       * </pre>
       *
       * <code>optional int32 env_texture_size = 10;</code>
       * @param value The envTextureSize to set.
       * @return This builder for chaining.
       */
      public Builder setEnvTextureSize(int value) {
        
        envTextureSize_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47; &#92;brief Size of cube map texture,
       * /        used to store intermediate rendering result.
       * </pre>
       *
       * <code>optional int32 env_texture_size = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnvTextureSize() {
        bitField0_ = (bitField0_ & ~0x00000200);
        envTextureSize_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:gazebo.msgs.CameraLens)
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.CameraLens)
    private static final gazebo.msgs.CameraLensOuterClass.CameraLens DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gazebo.msgs.CameraLensOuterClass.CameraLens();
    }

    public static gazebo.msgs.CameraLensOuterClass.CameraLens getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<CameraLens>
        PARSER = new com.google.protobuf.AbstractParser<CameraLens>() {
      @java.lang.Override
      public CameraLens parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CameraLens> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CameraLens> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public gazebo.msgs.CameraLensOuterClass.CameraLens getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_CameraLens_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gazebo_msgs_CameraLens_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021camera_lens.proto\022\013gazebo.msgs\"\253\001\n\nCam" +
      "eraLens\022\014\n\004type\030\001 \002(\t\022\n\n\002c1\030\002 \001(\001\022\n\n\002c2\030" +
      "\003 \001(\001\022\n\n\002c3\030\004 \001(\001\022\t\n\001f\030\005 \001(\001\022\013\n\003fun\030\006 \001(" +
      "\t\022\025\n\rscale_to_hfov\030\007 \001(\010\022\024\n\014cutoff_angle" +
      "\030\010 \001(\001\022\014\n\004hfov\030\t \001(\001\022\030\n\020env_texture_size" +
      "\030\n \001(\005"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_gazebo_msgs_CameraLens_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gazebo_msgs_CameraLens_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gazebo_msgs_CameraLens_descriptor,
        new java.lang.String[] { "Type", "C1", "C2", "C3", "F", "Fun", "ScaleToHfov", "CutoffAngle", "Hfov", "EnvTextureSize", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
