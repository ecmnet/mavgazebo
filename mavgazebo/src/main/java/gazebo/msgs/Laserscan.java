// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laserscan.proto

package gazebo.msgs;

public final class Laserscan {
  private Laserscan() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface LaserScanOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gazebo.msgs.LaserScan)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string frame = 1;</code>
     * @return Whether the frame field is set.
     */
    boolean hasFrame();
    /**
     * <code>required string frame = 1;</code>
     * @return The frame.
     */
    java.lang.String getFrame();
    /**
     * <code>required string frame = 1;</code>
     * @return The bytes for frame.
     */
    com.google.protobuf.ByteString
        getFrameBytes();

    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     * @return Whether the worldPose field is set.
     */
    boolean hasWorldPose();
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     * @return The worldPose.
     */
    gazebo.msgs.PoseOuterClass.Pose getWorldPose();
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     */
    gazebo.msgs.PoseOuterClass.PoseOrBuilder getWorldPoseOrBuilder();

    /**
     * <code>required double angle_min = 3;</code>
     * @return Whether the angleMin field is set.
     */
    boolean hasAngleMin();
    /**
     * <code>required double angle_min = 3;</code>
     * @return The angleMin.
     */
    double getAngleMin();

    /**
     * <code>required double angle_max = 4;</code>
     * @return Whether the angleMax field is set.
     */
    boolean hasAngleMax();
    /**
     * <code>required double angle_max = 4;</code>
     * @return The angleMax.
     */
    double getAngleMax();

    /**
     * <code>required double angle_step = 5;</code>
     * @return Whether the angleStep field is set.
     */
    boolean hasAngleStep();
    /**
     * <code>required double angle_step = 5;</code>
     * @return The angleStep.
     */
    double getAngleStep();

    /**
     * <code>required double range_min = 6;</code>
     * @return Whether the rangeMin field is set.
     */
    boolean hasRangeMin();
    /**
     * <code>required double range_min = 6;</code>
     * @return The rangeMin.
     */
    double getRangeMin();

    /**
     * <code>required double range_max = 7;</code>
     * @return Whether the rangeMax field is set.
     */
    boolean hasRangeMax();
    /**
     * <code>required double range_max = 7;</code>
     * @return The rangeMax.
     */
    double getRangeMax();

    /**
     * <code>required uint32 count = 8;</code>
     * @return Whether the count field is set.
     */
    boolean hasCount();
    /**
     * <code>required uint32 count = 8;</code>
     * @return The count.
     */
    int getCount();

    /**
     * <code>optional double vertical_angle_min = 9;</code>
     * @return Whether the verticalAngleMin field is set.
     */
    boolean hasVerticalAngleMin();
    /**
     * <code>optional double vertical_angle_min = 9;</code>
     * @return The verticalAngleMin.
     */
    double getVerticalAngleMin();

    /**
     * <code>optional double vertical_angle_max = 10;</code>
     * @return Whether the verticalAngleMax field is set.
     */
    boolean hasVerticalAngleMax();
    /**
     * <code>optional double vertical_angle_max = 10;</code>
     * @return The verticalAngleMax.
     */
    double getVerticalAngleMax();

    /**
     * <code>optional double vertical_angle_step = 11;</code>
     * @return Whether the verticalAngleStep field is set.
     */
    boolean hasVerticalAngleStep();
    /**
     * <code>optional double vertical_angle_step = 11;</code>
     * @return The verticalAngleStep.
     */
    double getVerticalAngleStep();

    /**
     * <code>optional uint32 vertical_count = 12;</code>
     * @return Whether the verticalCount field is set.
     */
    boolean hasVerticalCount();
    /**
     * <code>optional uint32 vertical_count = 12;</code>
     * @return The verticalCount.
     */
    int getVerticalCount();

    /**
     * <code>repeated double ranges = 13;</code>
     * @return A list containing the ranges.
     */
    java.util.List<java.lang.Double> getRangesList();
    /**
     * <code>repeated double ranges = 13;</code>
     * @return The count of ranges.
     */
    int getRangesCount();
    /**
     * <code>repeated double ranges = 13;</code>
     * @param index The index of the element to return.
     * @return The ranges at the given index.
     */
    double getRanges(int index);

    /**
     * <code>repeated double intensities = 14;</code>
     * @return A list containing the intensities.
     */
    java.util.List<java.lang.Double> getIntensitiesList();
    /**
     * <code>repeated double intensities = 14;</code>
     * @return The count of intensities.
     */
    int getIntensitiesCount();
    /**
     * <code>repeated double intensities = 14;</code>
     * @param index The index of the element to return.
     * @return The intensities at the given index.
     */
    double getIntensities(int index);
  }
  /**
   * Protobuf type {@code gazebo.msgs.LaserScan}
   */
  public static final class LaserScan extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:gazebo.msgs.LaserScan)
      LaserScanOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LaserScan.newBuilder() to construct.
    private LaserScan(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LaserScan() {
      frame_ = "";
      ranges_ = emptyDoubleList();
      intensities_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LaserScan();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gazebo.msgs.Laserscan.internal_static_gazebo_msgs_LaserScan_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gazebo.msgs.Laserscan.internal_static_gazebo_msgs_LaserScan_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gazebo.msgs.Laserscan.LaserScan.class, gazebo.msgs.Laserscan.LaserScan.Builder.class);
    }

    private int bitField0_;
    public static final int FRAME_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object frame_ = "";
    /**
     * <code>required string frame = 1;</code>
     * @return Whether the frame field is set.
     */
    @java.lang.Override
    public boolean hasFrame() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>required string frame = 1;</code>
     * @return The frame.
     */
    @java.lang.Override
    public java.lang.String getFrame() {
      java.lang.Object ref = frame_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          frame_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string frame = 1;</code>
     * @return The bytes for frame.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFrameBytes() {
      java.lang.Object ref = frame_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        frame_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int WORLD_POSE_FIELD_NUMBER = 2;
    private gazebo.msgs.PoseOuterClass.Pose worldPose_;
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     * @return Whether the worldPose field is set.
     */
    @java.lang.Override
    public boolean hasWorldPose() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     * @return The worldPose.
     */
    @java.lang.Override
    public gazebo.msgs.PoseOuterClass.Pose getWorldPose() {
      return worldPose_ == null ? gazebo.msgs.PoseOuterClass.Pose.getDefaultInstance() : worldPose_;
    }
    /**
     * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
     */
    @java.lang.Override
    public gazebo.msgs.PoseOuterClass.PoseOrBuilder getWorldPoseOrBuilder() {
      return worldPose_ == null ? gazebo.msgs.PoseOuterClass.Pose.getDefaultInstance() : worldPose_;
    }

    public static final int ANGLE_MIN_FIELD_NUMBER = 3;
    private double angleMin_ = 0D;
    /**
     * <code>required double angle_min = 3;</code>
     * @return Whether the angleMin field is set.
     */
    @java.lang.Override
    public boolean hasAngleMin() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>required double angle_min = 3;</code>
     * @return The angleMin.
     */
    @java.lang.Override
    public double getAngleMin() {
      return angleMin_;
    }

    public static final int ANGLE_MAX_FIELD_NUMBER = 4;
    private double angleMax_ = 0D;
    /**
     * <code>required double angle_max = 4;</code>
     * @return Whether the angleMax field is set.
     */
    @java.lang.Override
    public boolean hasAngleMax() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>required double angle_max = 4;</code>
     * @return The angleMax.
     */
    @java.lang.Override
    public double getAngleMax() {
      return angleMax_;
    }

    public static final int ANGLE_STEP_FIELD_NUMBER = 5;
    private double angleStep_ = 0D;
    /**
     * <code>required double angle_step = 5;</code>
     * @return Whether the angleStep field is set.
     */
    @java.lang.Override
    public boolean hasAngleStep() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>required double angle_step = 5;</code>
     * @return The angleStep.
     */
    @java.lang.Override
    public double getAngleStep() {
      return angleStep_;
    }

    public static final int RANGE_MIN_FIELD_NUMBER = 6;
    private double rangeMin_ = 0D;
    /**
     * <code>required double range_min = 6;</code>
     * @return Whether the rangeMin field is set.
     */
    @java.lang.Override
    public boolean hasRangeMin() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>required double range_min = 6;</code>
     * @return The rangeMin.
     */
    @java.lang.Override
    public double getRangeMin() {
      return rangeMin_;
    }

    public static final int RANGE_MAX_FIELD_NUMBER = 7;
    private double rangeMax_ = 0D;
    /**
     * <code>required double range_max = 7;</code>
     * @return Whether the rangeMax field is set.
     */
    @java.lang.Override
    public boolean hasRangeMax() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>required double range_max = 7;</code>
     * @return The rangeMax.
     */
    @java.lang.Override
    public double getRangeMax() {
      return rangeMax_;
    }

    public static final int COUNT_FIELD_NUMBER = 8;
    private int count_ = 0;
    /**
     * <code>required uint32 count = 8;</code>
     * @return Whether the count field is set.
     */
    @java.lang.Override
    public boolean hasCount() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>required uint32 count = 8;</code>
     * @return The count.
     */
    @java.lang.Override
    public int getCount() {
      return count_;
    }

    public static final int VERTICAL_ANGLE_MIN_FIELD_NUMBER = 9;
    private double verticalAngleMin_ = 0D;
    /**
     * <code>optional double vertical_angle_min = 9;</code>
     * @return Whether the verticalAngleMin field is set.
     */
    @java.lang.Override
    public boolean hasVerticalAngleMin() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional double vertical_angle_min = 9;</code>
     * @return The verticalAngleMin.
     */
    @java.lang.Override
    public double getVerticalAngleMin() {
      return verticalAngleMin_;
    }

    public static final int VERTICAL_ANGLE_MAX_FIELD_NUMBER = 10;
    private double verticalAngleMax_ = 0D;
    /**
     * <code>optional double vertical_angle_max = 10;</code>
     * @return Whether the verticalAngleMax field is set.
     */
    @java.lang.Override
    public boolean hasVerticalAngleMax() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional double vertical_angle_max = 10;</code>
     * @return The verticalAngleMax.
     */
    @java.lang.Override
    public double getVerticalAngleMax() {
      return verticalAngleMax_;
    }

    public static final int VERTICAL_ANGLE_STEP_FIELD_NUMBER = 11;
    private double verticalAngleStep_ = 0D;
    /**
     * <code>optional double vertical_angle_step = 11;</code>
     * @return Whether the verticalAngleStep field is set.
     */
    @java.lang.Override
    public boolean hasVerticalAngleStep() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <code>optional double vertical_angle_step = 11;</code>
     * @return The verticalAngleStep.
     */
    @java.lang.Override
    public double getVerticalAngleStep() {
      return verticalAngleStep_;
    }

    public static final int VERTICAL_COUNT_FIELD_NUMBER = 12;
    private int verticalCount_ = 0;
    /**
     * <code>optional uint32 vertical_count = 12;</code>
     * @return Whether the verticalCount field is set.
     */
    @java.lang.Override
    public boolean hasVerticalCount() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <code>optional uint32 vertical_count = 12;</code>
     * @return The verticalCount.
     */
    @java.lang.Override
    public int getVerticalCount() {
      return verticalCount_;
    }

    public static final int RANGES_FIELD_NUMBER = 13;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList ranges_;
    /**
     * <code>repeated double ranges = 13;</code>
     * @return A list containing the ranges.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getRangesList() {
      return ranges_;
    }
    /**
     * <code>repeated double ranges = 13;</code>
     * @return The count of ranges.
     */
    public int getRangesCount() {
      return ranges_.size();
    }
    /**
     * <code>repeated double ranges = 13;</code>
     * @param index The index of the element to return.
     * @return The ranges at the given index.
     */
    public double getRanges(int index) {
      return ranges_.getDouble(index);
    }

    public static final int INTENSITIES_FIELD_NUMBER = 14;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList intensities_;
    /**
     * <code>repeated double intensities = 14;</code>
     * @return A list containing the intensities.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getIntensitiesList() {
      return intensities_;
    }
    /**
     * <code>repeated double intensities = 14;</code>
     * @return The count of intensities.
     */
    public int getIntensitiesCount() {
      return intensities_.size();
    }
    /**
     * <code>repeated double intensities = 14;</code>
     * @param index The index of the element to return.
     * @return The intensities at the given index.
     */
    public double getIntensities(int index) {
      return intensities_.getDouble(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFrame()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWorldPose()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAngleMin()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAngleMax()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAngleStep()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRangeMin()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRangeMax()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getWorldPose().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, frame_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getWorldPose());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeDouble(3, angleMin_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeDouble(4, angleMax_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeDouble(5, angleStep_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeDouble(6, rangeMin_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeDouble(7, rangeMax_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeUInt32(8, count_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeDouble(9, verticalAngleMin_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeDouble(10, verticalAngleMax_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        output.writeDouble(11, verticalAngleStep_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        output.writeUInt32(12, verticalCount_);
      }
      for (int i = 0; i < ranges_.size(); i++) {
        output.writeDouble(13, ranges_.getDouble(i));
      }
      for (int i = 0; i < intensities_.size(); i++) {
        output.writeDouble(14, intensities_.getDouble(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, frame_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getWorldPose());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, angleMin_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, angleMax_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, angleStep_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(6, rangeMin_);
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(7, rangeMax_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, count_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, verticalAngleMin_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(10, verticalAngleMax_);
      }
      if (((bitField0_ & 0x00000400) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(11, verticalAngleStep_);
      }
      if (((bitField0_ & 0x00000800) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, verticalCount_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getRangesList().size();
        size += dataSize;
        size += 1 * getRangesList().size();
      }
      {
        int dataSize = 0;
        dataSize = 8 * getIntensitiesList().size();
        size += dataSize;
        size += 1 * getIntensitiesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof gazebo.msgs.Laserscan.LaserScan)) {
        return super.equals(obj);
      }
      gazebo.msgs.Laserscan.LaserScan other = (gazebo.msgs.Laserscan.LaserScan) obj;

      if (hasFrame() != other.hasFrame()) return false;
      if (hasFrame()) {
        if (!getFrame()
            .equals(other.getFrame())) return false;
      }
      if (hasWorldPose() != other.hasWorldPose()) return false;
      if (hasWorldPose()) {
        if (!getWorldPose()
            .equals(other.getWorldPose())) return false;
      }
      if (hasAngleMin() != other.hasAngleMin()) return false;
      if (hasAngleMin()) {
        if (java.lang.Double.doubleToLongBits(getAngleMin())
            != java.lang.Double.doubleToLongBits(
                other.getAngleMin())) return false;
      }
      if (hasAngleMax() != other.hasAngleMax()) return false;
      if (hasAngleMax()) {
        if (java.lang.Double.doubleToLongBits(getAngleMax())
            != java.lang.Double.doubleToLongBits(
                other.getAngleMax())) return false;
      }
      if (hasAngleStep() != other.hasAngleStep()) return false;
      if (hasAngleStep()) {
        if (java.lang.Double.doubleToLongBits(getAngleStep())
            != java.lang.Double.doubleToLongBits(
                other.getAngleStep())) return false;
      }
      if (hasRangeMin() != other.hasRangeMin()) return false;
      if (hasRangeMin()) {
        if (java.lang.Double.doubleToLongBits(getRangeMin())
            != java.lang.Double.doubleToLongBits(
                other.getRangeMin())) return false;
      }
      if (hasRangeMax() != other.hasRangeMax()) return false;
      if (hasRangeMax()) {
        if (java.lang.Double.doubleToLongBits(getRangeMax())
            != java.lang.Double.doubleToLongBits(
                other.getRangeMax())) return false;
      }
      if (hasCount() != other.hasCount()) return false;
      if (hasCount()) {
        if (getCount()
            != other.getCount()) return false;
      }
      if (hasVerticalAngleMin() != other.hasVerticalAngleMin()) return false;
      if (hasVerticalAngleMin()) {
        if (java.lang.Double.doubleToLongBits(getVerticalAngleMin())
            != java.lang.Double.doubleToLongBits(
                other.getVerticalAngleMin())) return false;
      }
      if (hasVerticalAngleMax() != other.hasVerticalAngleMax()) return false;
      if (hasVerticalAngleMax()) {
        if (java.lang.Double.doubleToLongBits(getVerticalAngleMax())
            != java.lang.Double.doubleToLongBits(
                other.getVerticalAngleMax())) return false;
      }
      if (hasVerticalAngleStep() != other.hasVerticalAngleStep()) return false;
      if (hasVerticalAngleStep()) {
        if (java.lang.Double.doubleToLongBits(getVerticalAngleStep())
            != java.lang.Double.doubleToLongBits(
                other.getVerticalAngleStep())) return false;
      }
      if (hasVerticalCount() != other.hasVerticalCount()) return false;
      if (hasVerticalCount()) {
        if (getVerticalCount()
            != other.getVerticalCount()) return false;
      }
      if (!getRangesList()
          .equals(other.getRangesList())) return false;
      if (!getIntensitiesList()
          .equals(other.getIntensitiesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFrame()) {
        hash = (37 * hash) + FRAME_FIELD_NUMBER;
        hash = (53 * hash) + getFrame().hashCode();
      }
      if (hasWorldPose()) {
        hash = (37 * hash) + WORLD_POSE_FIELD_NUMBER;
        hash = (53 * hash) + getWorldPose().hashCode();
      }
      if (hasAngleMin()) {
        hash = (37 * hash) + ANGLE_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getAngleMin()));
      }
      if (hasAngleMax()) {
        hash = (37 * hash) + ANGLE_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getAngleMax()));
      }
      if (hasAngleStep()) {
        hash = (37 * hash) + ANGLE_STEP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getAngleStep()));
      }
      if (hasRangeMin()) {
        hash = (37 * hash) + RANGE_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getRangeMin()));
      }
      if (hasRangeMax()) {
        hash = (37 * hash) + RANGE_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getRangeMax()));
      }
      if (hasCount()) {
        hash = (37 * hash) + COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getCount();
      }
      if (hasVerticalAngleMin()) {
        hash = (37 * hash) + VERTICAL_ANGLE_MIN_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getVerticalAngleMin()));
      }
      if (hasVerticalAngleMax()) {
        hash = (37 * hash) + VERTICAL_ANGLE_MAX_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getVerticalAngleMax()));
      }
      if (hasVerticalAngleStep()) {
        hash = (37 * hash) + VERTICAL_ANGLE_STEP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            java.lang.Double.doubleToLongBits(getVerticalAngleStep()));
      }
      if (hasVerticalCount()) {
        hash = (37 * hash) + VERTICAL_COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getVerticalCount();
      }
      if (getRangesCount() > 0) {
        hash = (37 * hash) + RANGES_FIELD_NUMBER;
        hash = (53 * hash) + getRangesList().hashCode();
      }
      if (getIntensitiesCount() > 0) {
        hash = (37 * hash) + INTENSITIES_FIELD_NUMBER;
        hash = (53 * hash) + getIntensitiesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static gazebo.msgs.Laserscan.LaserScan parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static gazebo.msgs.Laserscan.LaserScan parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(gazebo.msgs.Laserscan.LaserScan prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.LaserScan}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gazebo.msgs.LaserScan)
        gazebo.msgs.Laserscan.LaserScanOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gazebo.msgs.Laserscan.internal_static_gazebo_msgs_LaserScan_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gazebo.msgs.Laserscan.internal_static_gazebo_msgs_LaserScan_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gazebo.msgs.Laserscan.LaserScan.class, gazebo.msgs.Laserscan.LaserScan.Builder.class);
      }

      // Construct using gazebo.msgs.Laserscan.LaserScan.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getWorldPoseFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        frame_ = "";
        worldPose_ = null;
        if (worldPoseBuilder_ != null) {
          worldPoseBuilder_.dispose();
          worldPoseBuilder_ = null;
        }
        angleMin_ = 0D;
        angleMax_ = 0D;
        angleStep_ = 0D;
        rangeMin_ = 0D;
        rangeMax_ = 0D;
        count_ = 0;
        verticalAngleMin_ = 0D;
        verticalAngleMax_ = 0D;
        verticalAngleStep_ = 0D;
        verticalCount_ = 0;
        ranges_ = emptyDoubleList();
        intensities_ = emptyDoubleList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gazebo.msgs.Laserscan.internal_static_gazebo_msgs_LaserScan_descriptor;
      }

      @java.lang.Override
      public gazebo.msgs.Laserscan.LaserScan getDefaultInstanceForType() {
        return gazebo.msgs.Laserscan.LaserScan.getDefaultInstance();
      }

      @java.lang.Override
      public gazebo.msgs.Laserscan.LaserScan build() {
        gazebo.msgs.Laserscan.LaserScan result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public gazebo.msgs.Laserscan.LaserScan buildPartial() {
        gazebo.msgs.Laserscan.LaserScan result = new gazebo.msgs.Laserscan.LaserScan(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(gazebo.msgs.Laserscan.LaserScan result) {
        if (((bitField0_ & 0x00001000) != 0)) {
          ranges_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00001000);
        }
        result.ranges_ = ranges_;
        if (((bitField0_ & 0x00002000) != 0)) {
          intensities_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.intensities_ = intensities_;
      }

      private void buildPartial0(gazebo.msgs.Laserscan.LaserScan result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.frame_ = frame_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.worldPose_ = worldPoseBuilder_ == null
              ? worldPose_
              : worldPoseBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.angleMin_ = angleMin_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.angleMax_ = angleMax_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.angleStep_ = angleStep_;
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.rangeMin_ = rangeMin_;
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.rangeMax_ = rangeMax_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.count_ = count_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.verticalAngleMin_ = verticalAngleMin_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.verticalAngleMax_ = verticalAngleMax_;
          to_bitField0_ |= 0x00000200;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.verticalAngleStep_ = verticalAngleStep_;
          to_bitField0_ |= 0x00000400;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.verticalCount_ = verticalCount_;
          to_bitField0_ |= 0x00000800;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gazebo.msgs.Laserscan.LaserScan) {
          return mergeFrom((gazebo.msgs.Laserscan.LaserScan)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gazebo.msgs.Laserscan.LaserScan other) {
        if (other == gazebo.msgs.Laserscan.LaserScan.getDefaultInstance()) return this;
        if (other.hasFrame()) {
          frame_ = other.frame_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasWorldPose()) {
          mergeWorldPose(other.getWorldPose());
        }
        if (other.hasAngleMin()) {
          setAngleMin(other.getAngleMin());
        }
        if (other.hasAngleMax()) {
          setAngleMax(other.getAngleMax());
        }
        if (other.hasAngleStep()) {
          setAngleStep(other.getAngleStep());
        }
        if (other.hasRangeMin()) {
          setRangeMin(other.getRangeMin());
        }
        if (other.hasRangeMax()) {
          setRangeMax(other.getRangeMax());
        }
        if (other.hasCount()) {
          setCount(other.getCount());
        }
        if (other.hasVerticalAngleMin()) {
          setVerticalAngleMin(other.getVerticalAngleMin());
        }
        if (other.hasVerticalAngleMax()) {
          setVerticalAngleMax(other.getVerticalAngleMax());
        }
        if (other.hasVerticalAngleStep()) {
          setVerticalAngleStep(other.getVerticalAngleStep());
        }
        if (other.hasVerticalCount()) {
          setVerticalCount(other.getVerticalCount());
        }
        if (!other.ranges_.isEmpty()) {
          if (ranges_.isEmpty()) {
            ranges_ = other.ranges_;
            bitField0_ = (bitField0_ & ~0x00001000);
          } else {
            ensureRangesIsMutable();
            ranges_.addAll(other.ranges_);
          }
          onChanged();
        }
        if (!other.intensities_.isEmpty()) {
          if (intensities_.isEmpty()) {
            intensities_ = other.intensities_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureIntensitiesIsMutable();
            intensities_.addAll(other.intensities_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        if (!hasFrame()) {
          return false;
        }
        if (!hasWorldPose()) {
          return false;
        }
        if (!hasAngleMin()) {
          return false;
        }
        if (!hasAngleMax()) {
          return false;
        }
        if (!hasAngleStep()) {
          return false;
        }
        if (!hasRangeMin()) {
          return false;
        }
        if (!hasRangeMax()) {
          return false;
        }
        if (!hasCount()) {
          return false;
        }
        if (!getWorldPose().isInitialized()) {
          return false;
        }
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                frame_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getWorldPoseFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 25: {
                angleMin_ = input.readDouble();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 33: {
                angleMax_ = input.readDouble();
                bitField0_ |= 0x00000008;
                break;
              } // case 33
              case 41: {
                angleStep_ = input.readDouble();
                bitField0_ |= 0x00000010;
                break;
              } // case 41
              case 49: {
                rangeMin_ = input.readDouble();
                bitField0_ |= 0x00000020;
                break;
              } // case 49
              case 57: {
                rangeMax_ = input.readDouble();
                bitField0_ |= 0x00000040;
                break;
              } // case 57
              case 64: {
                count_ = input.readUInt32();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 73: {
                verticalAngleMin_ = input.readDouble();
                bitField0_ |= 0x00000100;
                break;
              } // case 73
              case 81: {
                verticalAngleMax_ = input.readDouble();
                bitField0_ |= 0x00000200;
                break;
              } // case 81
              case 89: {
                verticalAngleStep_ = input.readDouble();
                bitField0_ |= 0x00000400;
                break;
              } // case 89
              case 96: {
                verticalCount_ = input.readUInt32();
                bitField0_ |= 0x00000800;
                break;
              } // case 96
              case 105: {
                double v = input.readDouble();
                ensureRangesIsMutable();
                ranges_.addDouble(v);
                break;
              } // case 105
              case 106: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureRangesIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  ranges_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 106
              case 113: {
                double v = input.readDouble();
                ensureIntensitiesIsMutable();
                intensities_.addDouble(v);
                break;
              } // case 113
              case 114: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureIntensitiesIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  intensities_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 114
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object frame_ = "";
      /**
       * <code>required string frame = 1;</code>
       * @return Whether the frame field is set.
       */
      public boolean hasFrame() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>required string frame = 1;</code>
       * @return The frame.
       */
      public java.lang.String getFrame() {
        java.lang.Object ref = frame_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            frame_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string frame = 1;</code>
       * @return The bytes for frame.
       */
      public com.google.protobuf.ByteString
          getFrameBytes() {
        java.lang.Object ref = frame_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          frame_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string frame = 1;</code>
       * @param value The frame to set.
       * @return This builder for chaining.
       */
      public Builder setFrame(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        frame_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>required string frame = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearFrame() {
        frame_ = getDefaultInstance().getFrame();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <code>required string frame = 1;</code>
       * @param value The bytes for frame to set.
       * @return This builder for chaining.
       */
      public Builder setFrameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        frame_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private gazebo.msgs.PoseOuterClass.Pose worldPose_;
      private com.google.protobuf.SingleFieldBuilderV3<
          gazebo.msgs.PoseOuterClass.Pose, gazebo.msgs.PoseOuterClass.Pose.Builder, gazebo.msgs.PoseOuterClass.PoseOrBuilder> worldPoseBuilder_;
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       * @return Whether the worldPose field is set.
       */
      public boolean hasWorldPose() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       * @return The worldPose.
       */
      public gazebo.msgs.PoseOuterClass.Pose getWorldPose() {
        if (worldPoseBuilder_ == null) {
          return worldPose_ == null ? gazebo.msgs.PoseOuterClass.Pose.getDefaultInstance() : worldPose_;
        } else {
          return worldPoseBuilder_.getMessage();
        }
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public Builder setWorldPose(gazebo.msgs.PoseOuterClass.Pose value) {
        if (worldPoseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          worldPose_ = value;
        } else {
          worldPoseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public Builder setWorldPose(
          gazebo.msgs.PoseOuterClass.Pose.Builder builderForValue) {
        if (worldPoseBuilder_ == null) {
          worldPose_ = builderForValue.build();
        } else {
          worldPoseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public Builder mergeWorldPose(gazebo.msgs.PoseOuterClass.Pose value) {
        if (worldPoseBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            worldPose_ != null &&
            worldPose_ != gazebo.msgs.PoseOuterClass.Pose.getDefaultInstance()) {
            getWorldPoseBuilder().mergeFrom(value);
          } else {
            worldPose_ = value;
          }
        } else {
          worldPoseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public Builder clearWorldPose() {
        bitField0_ = (bitField0_ & ~0x00000002);
        worldPose_ = null;
        if (worldPoseBuilder_ != null) {
          worldPoseBuilder_.dispose();
          worldPoseBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public gazebo.msgs.PoseOuterClass.Pose.Builder getWorldPoseBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getWorldPoseFieldBuilder().getBuilder();
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      public gazebo.msgs.PoseOuterClass.PoseOrBuilder getWorldPoseOrBuilder() {
        if (worldPoseBuilder_ != null) {
          return worldPoseBuilder_.getMessageOrBuilder();
        } else {
          return worldPose_ == null ?
              gazebo.msgs.PoseOuterClass.Pose.getDefaultInstance() : worldPose_;
        }
      }
      /**
       * <code>required .gazebo.msgs.Pose world_pose = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          gazebo.msgs.PoseOuterClass.Pose, gazebo.msgs.PoseOuterClass.Pose.Builder, gazebo.msgs.PoseOuterClass.PoseOrBuilder> 
          getWorldPoseFieldBuilder() {
        if (worldPoseBuilder_ == null) {
          worldPoseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              gazebo.msgs.PoseOuterClass.Pose, gazebo.msgs.PoseOuterClass.Pose.Builder, gazebo.msgs.PoseOuterClass.PoseOrBuilder>(
                  getWorldPose(),
                  getParentForChildren(),
                  isClean());
          worldPose_ = null;
        }
        return worldPoseBuilder_;
      }

      private double angleMin_ ;
      /**
       * <code>required double angle_min = 3;</code>
       * @return Whether the angleMin field is set.
       */
      @java.lang.Override
      public boolean hasAngleMin() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>required double angle_min = 3;</code>
       * @return The angleMin.
       */
      @java.lang.Override
      public double getAngleMin() {
        return angleMin_;
      }
      /**
       * <code>required double angle_min = 3;</code>
       * @param value The angleMin to set.
       * @return This builder for chaining.
       */
      public Builder setAngleMin(double value) {
        
        angleMin_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>required double angle_min = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAngleMin() {
        bitField0_ = (bitField0_ & ~0x00000004);
        angleMin_ = 0D;
        onChanged();
        return this;
      }

      private double angleMax_ ;
      /**
       * <code>required double angle_max = 4;</code>
       * @return Whether the angleMax field is set.
       */
      @java.lang.Override
      public boolean hasAngleMax() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>required double angle_max = 4;</code>
       * @return The angleMax.
       */
      @java.lang.Override
      public double getAngleMax() {
        return angleMax_;
      }
      /**
       * <code>required double angle_max = 4;</code>
       * @param value The angleMax to set.
       * @return This builder for chaining.
       */
      public Builder setAngleMax(double value) {
        
        angleMax_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>required double angle_max = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearAngleMax() {
        bitField0_ = (bitField0_ & ~0x00000008);
        angleMax_ = 0D;
        onChanged();
        return this;
      }

      private double angleStep_ ;
      /**
       * <code>required double angle_step = 5;</code>
       * @return Whether the angleStep field is set.
       */
      @java.lang.Override
      public boolean hasAngleStep() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>required double angle_step = 5;</code>
       * @return The angleStep.
       */
      @java.lang.Override
      public double getAngleStep() {
        return angleStep_;
      }
      /**
       * <code>required double angle_step = 5;</code>
       * @param value The angleStep to set.
       * @return This builder for chaining.
       */
      public Builder setAngleStep(double value) {
        
        angleStep_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>required double angle_step = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearAngleStep() {
        bitField0_ = (bitField0_ & ~0x00000010);
        angleStep_ = 0D;
        onChanged();
        return this;
      }

      private double rangeMin_ ;
      /**
       * <code>required double range_min = 6;</code>
       * @return Whether the rangeMin field is set.
       */
      @java.lang.Override
      public boolean hasRangeMin() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>required double range_min = 6;</code>
       * @return The rangeMin.
       */
      @java.lang.Override
      public double getRangeMin() {
        return rangeMin_;
      }
      /**
       * <code>required double range_min = 6;</code>
       * @param value The rangeMin to set.
       * @return This builder for chaining.
       */
      public Builder setRangeMin(double value) {
        
        rangeMin_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>required double range_min = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearRangeMin() {
        bitField0_ = (bitField0_ & ~0x00000020);
        rangeMin_ = 0D;
        onChanged();
        return this;
      }

      private double rangeMax_ ;
      /**
       * <code>required double range_max = 7;</code>
       * @return Whether the rangeMax field is set.
       */
      @java.lang.Override
      public boolean hasRangeMax() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>required double range_max = 7;</code>
       * @return The rangeMax.
       */
      @java.lang.Override
      public double getRangeMax() {
        return rangeMax_;
      }
      /**
       * <code>required double range_max = 7;</code>
       * @param value The rangeMax to set.
       * @return This builder for chaining.
       */
      public Builder setRangeMax(double value) {
        
        rangeMax_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>required double range_max = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearRangeMax() {
        bitField0_ = (bitField0_ & ~0x00000040);
        rangeMax_ = 0D;
        onChanged();
        return this;
      }

      private int count_ ;
      /**
       * <code>required uint32 count = 8;</code>
       * @return Whether the count field is set.
       */
      @java.lang.Override
      public boolean hasCount() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>required uint32 count = 8;</code>
       * @return The count.
       */
      @java.lang.Override
      public int getCount() {
        return count_;
      }
      /**
       * <code>required uint32 count = 8;</code>
       * @param value The count to set.
       * @return This builder for chaining.
       */
      public Builder setCount(int value) {
        
        count_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 count = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearCount() {
        bitField0_ = (bitField0_ & ~0x00000080);
        count_ = 0;
        onChanged();
        return this;
      }

      private double verticalAngleMin_ ;
      /**
       * <code>optional double vertical_angle_min = 9;</code>
       * @return Whether the verticalAngleMin field is set.
       */
      @java.lang.Override
      public boolean hasVerticalAngleMin() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional double vertical_angle_min = 9;</code>
       * @return The verticalAngleMin.
       */
      @java.lang.Override
      public double getVerticalAngleMin() {
        return verticalAngleMin_;
      }
      /**
       * <code>optional double vertical_angle_min = 9;</code>
       * @param value The verticalAngleMin to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalAngleMin(double value) {
        
        verticalAngleMin_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_angle_min = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalAngleMin() {
        bitField0_ = (bitField0_ & ~0x00000100);
        verticalAngleMin_ = 0D;
        onChanged();
        return this;
      }

      private double verticalAngleMax_ ;
      /**
       * <code>optional double vertical_angle_max = 10;</code>
       * @return Whether the verticalAngleMax field is set.
       */
      @java.lang.Override
      public boolean hasVerticalAngleMax() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional double vertical_angle_max = 10;</code>
       * @return The verticalAngleMax.
       */
      @java.lang.Override
      public double getVerticalAngleMax() {
        return verticalAngleMax_;
      }
      /**
       * <code>optional double vertical_angle_max = 10;</code>
       * @param value The verticalAngleMax to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalAngleMax(double value) {
        
        verticalAngleMax_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_angle_max = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalAngleMax() {
        bitField0_ = (bitField0_ & ~0x00000200);
        verticalAngleMax_ = 0D;
        onChanged();
        return this;
      }

      private double verticalAngleStep_ ;
      /**
       * <code>optional double vertical_angle_step = 11;</code>
       * @return Whether the verticalAngleStep field is set.
       */
      @java.lang.Override
      public boolean hasVerticalAngleStep() {
        return ((bitField0_ & 0x00000400) != 0);
      }
      /**
       * <code>optional double vertical_angle_step = 11;</code>
       * @return The verticalAngleStep.
       */
      @java.lang.Override
      public double getVerticalAngleStep() {
        return verticalAngleStep_;
      }
      /**
       * <code>optional double vertical_angle_step = 11;</code>
       * @param value The verticalAngleStep to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalAngleStep(double value) {
        
        verticalAngleStep_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <code>optional double vertical_angle_step = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalAngleStep() {
        bitField0_ = (bitField0_ & ~0x00000400);
        verticalAngleStep_ = 0D;
        onChanged();
        return this;
      }

      private int verticalCount_ ;
      /**
       * <code>optional uint32 vertical_count = 12;</code>
       * @return Whether the verticalCount field is set.
       */
      @java.lang.Override
      public boolean hasVerticalCount() {
        return ((bitField0_ & 0x00000800) != 0);
      }
      /**
       * <code>optional uint32 vertical_count = 12;</code>
       * @return The verticalCount.
       */
      @java.lang.Override
      public int getVerticalCount() {
        return verticalCount_;
      }
      /**
       * <code>optional uint32 vertical_count = 12;</code>
       * @param value The verticalCount to set.
       * @return This builder for chaining.
       */
      public Builder setVerticalCount(int value) {
        
        verticalCount_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 vertical_count = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerticalCount() {
        bitField0_ = (bitField0_ & ~0x00000800);
        verticalCount_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList ranges_ = emptyDoubleList();
      private void ensureRangesIsMutable() {
        if (!((bitField0_ & 0x00001000) != 0)) {
          ranges_ = mutableCopy(ranges_);
          bitField0_ |= 0x00001000;
        }
      }
      /**
       * <code>repeated double ranges = 13;</code>
       * @return A list containing the ranges.
       */
      public java.util.List<java.lang.Double>
          getRangesList() {
        return ((bitField0_ & 0x00001000) != 0) ?
                 java.util.Collections.unmodifiableList(ranges_) : ranges_;
      }
      /**
       * <code>repeated double ranges = 13;</code>
       * @return The count of ranges.
       */
      public int getRangesCount() {
        return ranges_.size();
      }
      /**
       * <code>repeated double ranges = 13;</code>
       * @param index The index of the element to return.
       * @return The ranges at the given index.
       */
      public double getRanges(int index) {
        return ranges_.getDouble(index);
      }
      /**
       * <code>repeated double ranges = 13;</code>
       * @param index The index to set the value at.
       * @param value The ranges to set.
       * @return This builder for chaining.
       */
      public Builder setRanges(
          int index, double value) {
        
        ensureRangesIsMutable();
        ranges_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double ranges = 13;</code>
       * @param value The ranges to add.
       * @return This builder for chaining.
       */
      public Builder addRanges(double value) {
        
        ensureRangesIsMutable();
        ranges_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double ranges = 13;</code>
       * @param values The ranges to add.
       * @return This builder for chaining.
       */
      public Builder addAllRanges(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureRangesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ranges_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double ranges = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearRanges() {
        ranges_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00001000);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList intensities_ = emptyDoubleList();
      private void ensureIntensitiesIsMutable() {
        if (!((bitField0_ & 0x00002000) != 0)) {
          intensities_ = mutableCopy(intensities_);
          bitField0_ |= 0x00002000;
        }
      }
      /**
       * <code>repeated double intensities = 14;</code>
       * @return A list containing the intensities.
       */
      public java.util.List<java.lang.Double>
          getIntensitiesList() {
        return ((bitField0_ & 0x00002000) != 0) ?
                 java.util.Collections.unmodifiableList(intensities_) : intensities_;
      }
      /**
       * <code>repeated double intensities = 14;</code>
       * @return The count of intensities.
       */
      public int getIntensitiesCount() {
        return intensities_.size();
      }
      /**
       * <code>repeated double intensities = 14;</code>
       * @param index The index of the element to return.
       * @return The intensities at the given index.
       */
      public double getIntensities(int index) {
        return intensities_.getDouble(index);
      }
      /**
       * <code>repeated double intensities = 14;</code>
       * @param index The index to set the value at.
       * @param value The intensities to set.
       * @return This builder for chaining.
       */
      public Builder setIntensities(
          int index, double value) {
        
        ensureIntensitiesIsMutable();
        intensities_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double intensities = 14;</code>
       * @param value The intensities to add.
       * @return This builder for chaining.
       */
      public Builder addIntensities(double value) {
        
        ensureIntensitiesIsMutable();
        intensities_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double intensities = 14;</code>
       * @param values The intensities to add.
       * @return This builder for chaining.
       */
      public Builder addAllIntensities(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureIntensitiesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, intensities_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double intensities = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearIntensities() {
        intensities_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:gazebo.msgs.LaserScan)
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.LaserScan)
    private static final gazebo.msgs.Laserscan.LaserScan DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new gazebo.msgs.Laserscan.LaserScan();
    }

    public static gazebo.msgs.Laserscan.LaserScan getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<LaserScan>
        PARSER = new com.google.protobuf.AbstractParser<LaserScan>() {
      @java.lang.Override
      public LaserScan parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<LaserScan> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LaserScan> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public gazebo.msgs.Laserscan.LaserScan getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_LaserScan_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_gazebo_msgs_LaserScan_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017laserscan.proto\022\013gazebo.msgs\032\npose.pro" +
      "to\"\302\002\n\tLaserScan\022\r\n\005frame\030\001 \002(\t\022%\n\nworld" +
      "_pose\030\002 \002(\0132\021.gazebo.msgs.Pose\022\021\n\tangle_" +
      "min\030\003 \002(\001\022\021\n\tangle_max\030\004 \002(\001\022\022\n\nangle_st" +
      "ep\030\005 \002(\001\022\021\n\trange_min\030\006 \002(\001\022\021\n\trange_max" +
      "\030\007 \002(\001\022\r\n\005count\030\010 \002(\r\022\032\n\022vertical_angle_" +
      "min\030\t \001(\001\022\032\n\022vertical_angle_max\030\n \001(\001\022\033\n" +
      "\023vertical_angle_step\030\013 \001(\001\022\026\n\016vertical_c" +
      "ount\030\014 \001(\r\022\016\n\006ranges\030\r \003(\001\022\023\n\013intensitie" +
      "s\030\016 \003(\001"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          gazebo.msgs.PoseOuterClass.getDescriptor(),
        });
    internal_static_gazebo_msgs_LaserScan_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gazebo_msgs_LaserScan_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_gazebo_msgs_LaserScan_descriptor,
        new java.lang.String[] { "Frame", "WorldPose", "AngleMin", "AngleMax", "AngleStep", "RangeMin", "RangeMax", "Count", "VerticalAngleMin", "VerticalAngleMax", "VerticalAngleStep", "VerticalCount", "Ranges", "Intensities", });
    gazebo.msgs.PoseOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
